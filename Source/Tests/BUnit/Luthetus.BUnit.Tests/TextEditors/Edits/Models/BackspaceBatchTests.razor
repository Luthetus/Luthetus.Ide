@using Fluxor
@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.BackgroundTasks.Models
@using Luthetus.Common.RazorLib.Dialogs.Models
@using Luthetus.Common.RazorLib.Dialogs.Displays
@using Luthetus.Common.RazorLib.Dynamics.Models
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Notifications.Displays
@using Luthetus.Common.RazorLib.Notifications.Models
@using Luthetus.TextEditor.RazorLib
@using Luthetus.TextEditor.RazorLib.Events.Models
@using Luthetus.TextEditor.RazorLib.Installations.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays
@using Luthetus.TextEditor.RazorLib.Exceptions
@using Luthetus.Ide.RazorLib.Installations.Models

@inherits EditLogicTestBase
@code
{
	[Fact]
	public async Task Backspace_Batches()
	{
		// Construct
		var testData = EditLogicTestsInitialize("abc123Do-Re-Mi");
		Assert.Equal("abc123Do-Re-Mi", testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var lengthAbc = "abc".Length;
		var length123 = "123".Length;
		var lengthDoReMi = "Do-Re-Mi".Length;

		await RunTextEditorBackgroundTaskTest(editContext =>
		{
			var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
			var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
			var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
			var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

			if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
				return Task.CompletedTask;

			var textEditor = modelModifier;

			// Backspace One (normal backspace)
			{
				var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(textEditor.AllText.Length);
				primaryCursorModifier.LineIndex = lineIndex;
				primaryCursorModifier.ColumnIndex = columnIndex;

				textEditor.Delete(
					cursorModifierBag,
			        lengthDoReMi,
			        false,
			        TextEditorModel.DeleteKind.Backspace);

				Assert.Equal("abc123", textEditor.AllText);
				Assert.Equal(2, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
			}

			// Backspace Two (cause a batch to be created)
			{
				var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(textEditor.AllText.Length);
				primaryCursorModifier.LineIndex = lineIndex;
				primaryCursorModifier.ColumnIndex = columnIndex;

				textEditor.Delete(
					cursorModifierBag,
			        length123,
			        false,
			        TextEditorModel.DeleteKind.Backspace);

				Assert.Equal("abc", textEditor.AllText);
				Assert.Equal(2, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
			}

			// Backspace Three (add to existing batch)
			{
				var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(textEditor.AllText.Length);
				primaryCursorModifier.LineIndex = lineIndex;
				primaryCursorModifier.ColumnIndex = columnIndex;

				textEditor.Delete(
					cursorModifierBag,
			        lengthAbc,
			        false,
			        TextEditorModel.DeleteKind.Backspace);

				Assert.Equal(string.Empty, textEditor.AllText);
				Assert.Equal(2, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
			}

			// undo, undo, redo, redo

			// Undo One
			textEditor.UndoEdit();
			Assert.Equal("abc123Do-Re-Mi", textEditor.AllText);
			Assert.Equal(2, textEditor.EditBlockList.Count);
			Assert.Equal(0, textEditor.EditBlockIndex);

			// Undo Two
			Assert.Throws<LuthetusTextEditorException>(textEditor.UndoEdit);

			// Redo One
			textEditor.RedoEdit();
			Assert.Equal(string.Empty, textEditor.AllText);
			Assert.Equal(2, textEditor.EditBlockList.Count);
			Assert.Equal(1, textEditor.EditBlockIndex);

			// Redo Two
			Assert.Throws<LuthetusTextEditorException>(textEditor.RedoEdit);

			return Task.CompletedTask;
		});
	}
}
