@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals.Symbols;

@code {
	
	public static RenderFragment<(ISymbol Symbol, ISyntaxNode Node)> GetConstructorDefinitionNodeSymbolRenderFragment = driver => 
	@<text>
		@if (driver.Node is ConstructorDefinitionNode constructorDefinitionNode)
    	{
    		<text>
                <span>(constructor)</span>
                <span class="luth_te_type">@driver.Symbol.TextSpan.GetText()</span>
            </text>
    	}
    	else
    	{
    		<text>
    			<span>(constructor)</span>
                <span class="luth_te_keyword">undefined</span>
                <span class="luth_te_type">@driver.Symbol.TextSpan.GetText()</span>
            </text>
    	}
    </text>;
    
    public static RenderFragment<(ISymbol Symbol, ISyntaxNode Node)> GetLambdaSymbolRenderFragment = driver => 
	@<text>
	    <span class="luth_te_keyword">lambda</span><!--
	    
	    -->:<br/>
	
	    <span class="@(string.Empty /* Lambdas do not have their own css class as of (2024-11-02) */)">
	    	
	    	@{ var lambdaSymbol = (LambdaSymbol)driver.Symbol; }
	    	
	    	<!--
	    		This UI for the lambda is super odd to read. I'm working on the lambda parsing and I can't remember off the top of my head how to get rid of a space between
	    		UI elements and I'm not done with the parsing so I really don't wanna waste anytime on this I just put a bunch of comments to line them together.
	    	-->
	    	<span>
	        	(<!--
	        	-->@for (int i = 0; i < lambdaSymbol.LambdaExpressionNode.VariableDeclarationNodeList.Count; i++)
	        	{<!--
	        		-->var index = i;<!--
	        		-->var variableDeclarationNode = lambdaSymbol.LambdaExpressionNode.VariableDeclarationNodeList[index];<!--
	        		--><text><!--
	        			--><span class="luth_te_type">@variableDeclarationNode.TypeClauseNode.TypeIdentifierToken.TextSpan.GetText()</span> <span class="luth_te_variable">@variableDeclarationNode.IdentifierToken.TextSpan.GetText()</span><!--
	        			-->@if (index < lambdaSymbol.LambdaExpressionNode.VariableDeclarationNodeList.Count - 1)
	        			{<!--
	        				--><text>, </text><!--
	        			-->}<!--
	        		--></text><!--
	        	-->}<!--
	        	-->)
	    	</span>
	    	
	    	@* => *@
	        @driver.Symbol.TextSpan.GetText()
	        
	        @if (lambdaSymbol.LambdaExpressionNode.CodeBlockNodeIsExpression)
	        {
	        	<text> ...;</text>
	        }
	        else
	        {
	        	<text> {...}</text>
	        }
	    </span>
	</text>;
}
