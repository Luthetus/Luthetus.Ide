@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals;
@using Luthetus.Common.RazorLib.Dimensions.Models;

@{ var renderBatchLocal = RenderBatch; }

@if (renderBatchLocal is not null)
{
	var leftRelativeToParentInPixelsCssStyle = string.Empty;
    var textEditorKeymap = (ITextEditorKeymap)renderBatchLocal.Options!.Keymap!;
    
    if (!renderBatchLocal.Options!.UseMonospaceOptimizations)
	{
	    var leftRelativeToParentInPixelsCssValue = _leftRelativeToParentInPixels.ToCssValue();
	    leftRelativeToParentInPixelsCssStyle = $"left: {leftRelativeToParentInPixelsCssValue}px !important;";
	}
	
	<textarea @ref="_cursorDisplayElementReference"
	          @onkeydown="HandleOnKeyDown"
	          id="@GetCursorDisplayId(renderBatchLocal)"
	          tabindex="@GetTabIndex(renderBatchLocal)"
	          class="luth_te_text-editor-cursor @BlinkAnimationCssClass @(textEditorKeymap.GetCursorCssClassString())"
	          style="@GetCursorStyleCss() @leftRelativeToParentInPixelsCssStyle">
	</textarea>
	
	<div class="luth_te_text-editor-caret-row"
	     style="@GetCaretRowStyleCss()">
	</div>
	
	if (renderBatchLocal.ViewModel.MenuKind != MenuKind.None && GetIncludeContextMenuHelperComponent(renderBatchLocal))
	{
	    <div @onkeydown:stopPropagation="true"
	         @onmousedown:stopPropagation="true"
	         @onmousemove:stopPropagation="true"
	         class="luth_te_text-editor-context-menu"
	         style="@GetMenuStyleCss()">
	
	        <CascadingValue Name="TextEditorMenuShouldTakeFocusFunc"
	                        Value="TextEditorMenuShouldTakeFocus">
	            @switch (renderBatchLocal.ViewModel.MenuKind)
	            {
	                case MenuKind.ContextMenu:
                        if (renderBatchLocal.ViewModelDisplayOptions.ContextMenuRenderFragmentOverride is not null)
			            {
			                @renderBatchLocal.ViewModelDisplayOptions.ContextMenuRenderFragmentOverride(RenderBatch)
			            }
			            else
			            {
			                <ContextMenu RenderBatch="RenderBatch"/>
			            }
	                    break;
	                case MenuKind.AutoCompleteMenu:
	                    if (renderBatchLocal.ViewModelDisplayOptions.AutoCompleteMenuRenderFragmentOverride is not null)
			            {
			                @renderBatchLocal.ViewModelDisplayOptions.AutoCompleteMenuRenderFragmentOverride(RenderBatch)
			            }
			            else
			            {
			                <AutocompleteMenu RenderBatch="RenderBatch"/>
			            }
	                    break;
	            }
	        </CascadingValue>
	    </div>
	}
}
