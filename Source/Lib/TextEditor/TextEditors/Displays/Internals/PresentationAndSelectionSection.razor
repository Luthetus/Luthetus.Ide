@using System.Collections.Immutable
@using Luthetus.TextEditor.RazorLib.Decorations.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Cursors.Models

@{ var renderBatchLocal = RenderBatch; }

@if (renderBatchLocal is not null)
{
	<div class="luth_te_first-render-presentation-layer-group">
	
	    @{
	        var FIRST_presentationLayerOrderedByRankAscending =
	        	GetTextEditorPresentationModels(renderBatchLocal.ViewModel.FirstPresentationLayerKeysList)
	        	.OrderBy(x => x.Rank).ToList();
	    }
	
	    @foreach (var presentationLayer in FIRST_presentationLayerOrderedByRankAscending)
	    {
	        var completedCalculation = presentationLayer.CompletedCalculation;
	
	        var textSpansList = completedCalculation?.TextSpanList
	            ?? Array.Empty<TextEditorTextSpan>().ToImmutableArray();
	
	        var textModificationList = completedCalculation?.TextModificationsSinceRequestList.ToArray()
	            ?? Array.Empty<TextEditorTextModification>();
	
	        @if (completedCalculation is not null)
	        {
	            textSpansList = PresentationVirtualizeAndShiftTextSpans(textModificationList, completedCalculation.TextSpanList);
	
	            <div class="@presentationLayer.CssClassString">
	                @foreach (var textSpan in textSpansList)
	                {
	                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
	
	                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(renderBatchLocal.Model, boundsInPositionIndexUnits);
	
	                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
	                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
	                         i++)
	                    {
	                        var rowIndex = i;
	
	                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
	                             style="@PresentationGetCssStyleString(
	                                    boundsInPositionIndexUnits.StartingIndexInclusive,
	                                    boundsInPositionIndexUnits.EndingIndexExclusive,
	                                    rowIndex)">
	                        </div>
	                    }
	                }
	            </div>
	        }
	    }
	</div>
	
	<div class="luth_te_text-selection-group">
	    @if (TextEditorSelectionHelper.HasSelectedText(renderBatchLocal.ViewModel.PrimaryCursor.Selection) &&
	         renderBatchLocal.ViewModel.VirtualizationResult.EntryList.Length > 0)
	    {
	        var selectionBoundsInPositionIndexUnits = TextEditorSelectionHelper.GetSelectionBounds(
	            renderBatchLocal.ViewModel.PrimaryCursor.Selection);
	
	        var selectionBoundsInRowIndexUnits = GetSelectionBoundsInRowIndexUnits(selectionBoundsInPositionIndexUnits);
	
	        var virtualLowerBoundInclusiveRowIndex = renderBatchLocal.ViewModel.VirtualizationResult.EntryList.First().Index;
	        var virtualUpperBoundExclusiveRowIndex = 1 + renderBatchLocal.ViewModel.VirtualizationResult.EntryList.Last().Index;
	
	        int useLowerBoundInclusiveRowIndex = virtualLowerBoundInclusiveRowIndex >= selectionBoundsInRowIndexUnits.lowerRowIndexInclusive
	            ? virtualLowerBoundInclusiveRowIndex
	            : selectionBoundsInRowIndexUnits.lowerRowIndexInclusive;
	
	        int useUpperBoundExclusiveRowIndex = virtualUpperBoundExclusiveRowIndex <= selectionBoundsInRowIndexUnits.upperRowIndexExclusive
	            ? virtualUpperBoundExclusiveRowIndex
	            : selectionBoundsInRowIndexUnits.upperRowIndexExclusive;
	
	        for (var badIndex = useLowerBoundInclusiveRowIndex; badIndex < useUpperBoundExclusiveRowIndex; badIndex++)
	        {
	            var rowIndex = badIndex;
	            var textSelectionStyleCss = string.Empty;
	
	            if (renderBatchLocal.Options!.UseMonospaceOptimizations)
	            {
	                textSelectionStyleCss = GetTextSelectionStyleCss(
	                    selectionBoundsInPositionIndexUnits.lowerPositionIndexInclusive,
	                    selectionBoundsInPositionIndexUnits.upperPositionIndexExclusive,
	                    rowIndex);
	            }
				
				<div class="luth_te_text-selection"
				     style="@textSelectionStyleCss">
				</div>
	        }
	    }
	</div>
	                        
	<div class="luth_te_last-render-presentation-layer-group">
	
	    @{
	        var LAST_presentationLayerOrderedByRankAscending = 
	        	GetTextEditorPresentationModels(renderBatchLocal.ViewModel.LastPresentationLayerKeysList)
	        	.OrderBy(x => x.Rank).ToList();
	    }
	
	    @foreach (var presentationLayer in LAST_presentationLayerOrderedByRankAscending)
	    {
	        var completedCalculation = presentationLayer.CompletedCalculation;
	
	        var textSpansList = completedCalculation?.TextSpanList
	            ?? Array.Empty<TextEditorTextSpan>().ToImmutableArray();
	
	        var textModificationList = completedCalculation?.TextModificationsSinceRequestList.ToArray()
	            ?? Array.Empty<TextEditorTextModification>();
	
	        @if (completedCalculation is not null)
	        {
	            textSpansList = PresentationVirtualizeAndShiftTextSpans(textModificationList, completedCalculation.TextSpanList);
	
	            <div class="@presentationLayer.CssClassString">
	                @foreach (var textSpan in textSpansList)
	                {
	                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
	
	                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(renderBatchLocal.Model, boundsInPositionIndexUnits);
	
	                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
	                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
	                         i++)
	                    {
	                        var rowIndex = i;
	
	                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
	                             style="@PresentationGetCssStyleString(
	                                    boundsInPositionIndexUnits.StartingIndexInclusive,
	                                    boundsInPositionIndexUnits.EndingIndexExclusive,
	                                    rowIndex)">
	                        </div>
	                    }
	                }
	            </div>
	        }
	    }
	</div>
}
