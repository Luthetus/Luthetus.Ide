@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals

@{
	var syntaxViewModelLocal = SyntaxViewModel;
	
	string? prefixText;
	string? text;
	GenericParametersListingNode? genericParametersListingNode;
	bool? hasQuestionMark;
	
	if (syntaxViewModelLocal.DefinitionNode is null && syntaxViewModelLocal.TargetNode is null && syntaxViewModelLocal.Symbol is null)
	{
		prefixText = "(null)";
		text = null;
		genericParametersListingNode = null;
		hasQuestionMark = null;
	}
	else if (syntaxViewModelLocal.DefinitionNode is not null && syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.TypeDefinitionNode)
	{
		prefixText = "(definition)";
		text = ((TypeDefinitionNode)syntaxViewModelLocal.DefinitionNode).TypeIdentifierToken.TextSpan.GetText();
		genericParametersListingNode = null;
		hasQuestionMark = null;
	}
	else if (syntaxViewModelLocal.TargetNode is not null && syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.TypeClauseNode)
	{
		prefixText = "(reference)";
		text = ((TypeClauseNode)syntaxViewModelLocal.TargetNode).TypeIdentifierToken.TextSpan.GetText();
		genericParametersListingNode = null;
		hasQuestionMark = null;
	}
	else if (syntaxViewModelLocal.Symbol is not null && syntaxViewModelLocal.Symbol.SyntaxKind == SyntaxKind.TypeSymbol)
	{
		prefixText = "(symbol)";
		text = ((TypeSymbol)syntaxViewModelLocal.Symbol).TextSpan.GetText();
		genericParametersListingNode = null;
		hasQuestionMark = null;
	}
	else
	{
		prefixText = "(unrecognizable-state)";
		text = null;
		genericParametersListingNode = null;
		hasQuestionMark = null;
	}
}

<span style="display: inline-flex;">
	
	@if (!string.IsNullOrWhiteSpace(prefixText))
	{
		<span>
			@prefixText&nbsp;
		</span>
	}
	
	@if (!string.IsNullOrWhiteSpace(text))
	{
		var classCssString = syntaxViewModelLocal.DefinitionNode is null
			? string.Empty
			: "luth_te_syntax-onclick";
	
		<span class="@classCssString luth_te_type"
			  @onclick="() => HandleOnClick(syntaxViewModelLocal)">
			@text
		</span>
	}
	
	@if (genericParametersListingNode is not null)
	{
		<text>&lt;</text>
		
		@for (int badIndex = 0; badIndex < genericParametersListingNode.GenericParameterEntryNodeList.Count; badIndex++)
		{
			var index = badIndex;
			var genericParameter = genericParametersListingNode.GenericParameterEntryNodeList[index];
			
        	var syntaxViewModel = new SyntaxViewModel(
        		symbol: null,
        		targetNode: genericParameter.TypeClauseNode,
        		definitionNode: null);
            <TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
			
			if (index < genericParametersListingNode.GenericParameterEntryNodeList.Count - 1)
			{
				<text>,</text>
			}
		}
		
		<text>&gt;</text>
	}
	
	@if (hasQuestionMark is not null && hasQuestionMark.Value)
	{
		<text>?</text>
	}
</span>
