@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals

@{
	var syntaxViewModelLocal = SyntaxViewModel;

	TypeSymbol? symbolLocal = null;
	
	if (syntaxViewModelLocal.Symbol.SyntaxKind == SyntaxKind.TypeSymbol)
	{
		symbolLocal = (TypeSymbol)syntaxViewModelLocal.Symbol;
	}

	var targetNodeLocal = syntaxViewModelLocal.TargetNode as TypeClauseNode;
	var definitionNodeLocal = syntaxViewModelLocal.DefinitionNode as TypeDefinitionNode;
}

@*
	Break down the cases as, 'all null' then 'definitionNodeLocal' comes second
	because it provides the most information in the UI.
	
	Continue 'else if' by order of how much information the object can provide.
*@
@if (symbolLocal is null && targetNodeLocal is null && definitionNodeLocal is null)
{
	<span>
		@nameof(TypeSyntaxDisplay): symbolLocal is null && targetNodeLocal is null && definitionNodeLocal is null
	</span>
}
else if (definitionNodeLocal is not null)
{
	<span>
		@nameof(TypeSyntaxDisplay): definitionNodeLocal is not null
	</span>
}
else if (targetNodeLocal is not null)
{
	<span>
		@nameof(TypeSyntaxDisplay): targetNodeLocal is not null
	</span>
}
else if (symbolLocal is not null)
{
	<span>
		@nameof(TypeSyntaxDisplay): symbolLocal is not null
	</span>
}

<span style="display: inline-flex;">
	
	<span class="luth_te_syntax-onclick luth_te_type"
		  @onclick="() => HandleOnClick(syntaxViewModelLocal)">
		@targetNodeLocal.TypeIdentifierToken.TextSpan.GetText()
	</span>
	
	@if (targetNodeLocal.GenericParametersListingNode is not null)
	{
		<text>&lt;</text>
		
		@for (int badIndex = 0; badIndex < targetNodeLocal.GenericParametersListingNode.GenericParameterEntryNodeList.Count; badIndex++)
		{
			var index = badIndex;
			var genericParameter = targetNodeLocal.GenericParametersListingNode.GenericParameterEntryNodeList[index];
			
        	var syntaxViewModel = new SyntaxViewModel(
        		symbol: null,
        		targetNode: genericParameter.TypeClauseNode,
        		definitionNode: null);
            <TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
			
			if (index < targetNodeLocal.GenericParametersListingNode.GenericParameterEntryNodeList.Count - 1)
			{
				<text>,</text>
			}
		}
		
		<text>&gt;</text>
	}
	
	@if (targetNodeLocal.HasQuestionMark)
	{
		<text>?</text>
	}
</span>
