@using System.Collections.Immutable;
@using System.Text;
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.Common.RazorLib.Keyboards.Models;
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Icons.Models
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.Cursors.Models
@using Luthetus.TextEditor.RazorLib.Keymaps.Models.Vims;
@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.Htmls.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models
@{
	var localStoredRenderBatchTuple = _storedRenderBatchTuple;
    var renderBatchUnsafe = localStoredRenderBatchTuple.Unsafe;
    var renderBatchValidated = localStoredRenderBatchTuple.Validated;

    var cssClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
    var cssStyle = $"{renderBatchUnsafe.FontSizeInPixelsCssStyle} {renderBatchUnsafe.FontFamilyCssStyle} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
}

<div class="@cssClass" style="@cssStyle">

	@{
		var headerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.HeaderComponentType;
	
	    if (headerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="headerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }

    <div @onclick="FocusTextEditorAsync"
         @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
         @onkeydown:preventDefault="true"
         @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
         @oncontextmenu:preventDefault="true"
         @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
         @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
         @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
         @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
         @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
         @ontouchstart="ReceiveOnTouchStart"
         @ontouchmove="ReceiveOnTouchMove"
         @ontouchend="ClearTouch"
         @ontouchcancel="ClearTouch"
         @ontouchleave="ClearTouch"
         id="@ContentElementId"
         style="@(renderBatchUnsafe.HeightCssStyle) @ViewModelDisplayOptions.TextEditorStyleCssString"
         class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
         tabindex="-1">

		<div class="luth_te_measure-character-width-and-row-height-wrapper luth_te_row">
		    <div class="luth_te_measure-character-width-and-row-height luth_te_row"
		         id="@MeasureCharacterWidthAndRowHeightElementId">
		
		        @for (var i = 0; i < TEST_STRING_REPEAT_COUNT; i++)
		        {
		            <text>
		                @TEST_STRING_FOR_MEASUREMENT
		            </text>
		        }
		    </div>
		</div>
      	
        @if (ViewModelDisplayOptions.IncludeGutterComponent &&
        	 renderBatchValidated is not null)
        {
            @_gutterDriver.GetRenderFragment(renderBatchValidated);
        }

        @if (renderBatchValidated is not null)
        {
        	_bodyDriver.GetRenderFragment(renderBatchValidated);
        
        	<div class="luth_te_body-section"
		 		style="@_bodyDriver.GetBodyStyleCss(_bodyDriver._renderBatch)">
		 		
			@{
				var primaryCursor = _bodyDriver._renderBatch.ViewModel!.PrimaryCursor;
			}
		        
@* RowSection.razor Open *@
<div class="luth_te_row-section"
	id="@_bodyDriver._renderBatch.ViewModel.BodyElementId">
		    
	@* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
	@_bodyDriver._root._bodyVirtualizationDriver.GetRenderFragment(_bodyDriver._renderBatch)
				                           
	@_bodyDriver._root._presentationAndSelectionDriver.GetRenderFragment(_bodyDriver._renderBatch)
	
	@foreach (var virtualizationLine in _bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList)
	{
		<div class="luth_te_row"
			 style="@_bodyDriver.RowSection_GetRowStyleCss(_bodyDriver._renderBatch, virtualizationLine.LineIndex, virtualizationLine.LeftInPixels)">
		
			@*
				'!= 0' because the struct's int property will default to '0',
				and if there is no text then the property is unchanged from its default value.
			*@
			@if (virtualizationLine.VirtualizationSpanIndexExclusiveEnd != 0)
			{
				foreach (var virtualizationSpan in _bodyDriver._renderBatch.ViewModel.VirtualizationResult.VirtualizationSpanList
						 	.Skip(virtualizationLine.VirtualizationSpanIndexInclusiveStart)
							.Take(virtualizationLine.VirtualizationSpanIndexExclusiveEnd - virtualizationLine.VirtualizationSpanIndexInclusiveStart))
				{
					<span class="@virtualizationSpan.CssClass">
			            @((MarkupString)virtualizationSpan.Text)
			        </span>
			    }
			}
			
			@if (_bodyDriver.GlobalShowNewlines && virtualizationLine.LineIndex < _bodyDriver._renderBatch.Model.LineCount)
			{
				var amountOfLeftInCharacterWidthUnits = virtualizationLine.LeftInPixels / _bodyDriver._renderBatch.ViewModel.CharAndLineMeasurements.CharacterWidth;
				
				var lengthOfRow = _bodyDriver._renderBatch.Model.GetLineLength(virtualizationLine.LineIndex, true);
				
				if (amountOfLeftInCharacterWidthUnits <= lengthOfRow)
				{
				    var rowEndingTuple = _bodyDriver._renderBatch.Model.LineEndList[virtualizationLine.LineIndex];
				
				    <span class="luth_te_newline">
				        @rowEndingTuple.LineEndKind.AsCharactersHtmlEscaped()
				    </span>
				}
			}
		</div>
	}
	
	@{
		_cursorDriver.GetRenderFragment(renderBatchValidated);
					
		var leftRelativeToParentInPixelsCssStyle = string.Empty;
		var textEditorKeymap = (ITextEditorKeymap)_cursorDriver._renderBatch.Options!.Keymap!;
					    
		if (!_cursorDriver._renderBatch.Options!.UseMonospaceOptimizations)
		{
			var leftRelativeToParentInPixelsCssValue = _cursorDriver._leftRelativeToParentInPixels.ToCssValue();
			leftRelativeToParentInPixelsCssStyle = $"left: {leftRelativeToParentInPixelsCssValue}px !important;";
		}
	}
					
	<textarea id="@_cursorDriver.GetCursorDisplayId(_cursorDriver._renderBatch)"
				tabindex="@_cursorDriver.GetTabIndex(_cursorDriver._renderBatch)"
				class="luth_te_text-editor-cursor @_cursorDriver.BlinkAnimationCssClass @(textEditorKeymap.GetCursorCssClassString())"
				style="@_cursorDriver.GetCursorStyleCss() @leftRelativeToParentInPixelsCssStyle">
	</textarea>
					
	<div class="luth_te_text-editor-caret-row"
			style="@_cursorDriver.GetCaretRowStyleCss()">
	</div>
</div>
@* RowSection.razor Close *@
			
			    <ScrollbarSection RenderBatch="_bodyDriver._renderBatch"/>
			    <TooltipDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <FindOverlayDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <WidgetLayerDisplay RenderBatch="_bodyDriver._renderBatch"/>
			</div>
        }

        @if (renderBatchValidated?.ViewModel?.ShowCommandBar ?? false)
        {
            <CommandBarDisplay RenderBatch="renderBatchValidated"/>
        }
        
        @if (renderBatchUnsafe.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (renderBatchUnsafe.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (renderBatchUnsafe.Options is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    </div>
    
    @{
		var footerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.FooterComponentType;
	
	    if (footerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="footerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }
</div>
