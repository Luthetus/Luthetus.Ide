@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.Common.RazorLib.Keyboards.Models;
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Icons.Models
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.Cursors.Models
@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.Htmls.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models
@using Luthetus.TextEditor.RazorLib.Decorations.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models

<div @onclick="FocusTextEditorAsync"
     @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
     @onkeydown:preventDefault="true"
     @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
     @oncontextmenu:preventDefault="true"
     @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
     @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
     @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
     @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
     @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
     @ontouchstart="ReceiveOnTouchStart"
     @ontouchmove="ReceiveOnTouchMove"
     @ontouchend="ClearTouch"
     @ontouchcancel="ClearTouch"
     @ontouchleave="ClearTouch"
     id="@ContentElementId"
     style="@_personalWrapperCssStyle"
     class="@_personalWrapperCssClass"
     tabindex="-1">
	
	@{
		string topVirtualizationBoundaryStyleCssString;
		string bottomVirtualizationBoundaryStyleCssString;
		
		if (_activeRenderBatch is not null)
	    {
	    	// The gutter and the body share the top and bottom virtualization boundaries.
	    	// Therefore calculate them once here and share the result.
	    	topVirtualizationBoundaryStyleCssString = Virtualization_GetStyleCssString(_activeRenderBatch.ViewModel.VirtualizationResult.TopVirtualizationBoundary);
			bottomVirtualizationBoundaryStyleCssString = Virtualization_GetStyleCssString(_activeRenderBatch.ViewModel.VirtualizationResult.BottomVirtualizationBoundary);
	    }
	    else
	    {
	    	topVirtualizationBoundaryStyleCssString = string.Empty;
			bottomVirtualizationBoundaryStyleCssString = string.Empty;
	    }
	}
  	
    @if (ViewModelDisplayOptions.IncludeGutterComponent && _activeRenderBatch is not null)
    {
        <div class="luth_te_gutter-section"
		      style="@(GetGutterSectionStyleCss())"
		      id="@_activeRenderBatch.ViewModel.GutterElementId">
		      
            @* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
            
            @* Virtualization Open *@
			<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_top"
				 style="@topVirtualizationBoundaryStyleCssString">
			</div>
		
		    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_bottom"
		    	 style="@bottomVirtualizationBoundaryStyleCssString">
			</div>
            @* Virtualization Close *@
		    
		    @foreach (var virtualizedRow in _activeRenderBatch.ViewModel.VirtualizationResult.EntryList)
		    {
		        <div class="luth_te_gutter"
		             style="@(GetGutterStyleCss(virtualizedRow.LineIndex))">
		            @(virtualizedRow.LineIndex + 1)
		        </div>
		    }
		    
		    @{
		        var heightOfGutter = _activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Length *
		                             _activeRenderBatch.ViewModel.CharAndLineMeasurements.LineHeight;
		
		        // The scrollbar is off when one uses the 'if (heightOfGutter...)' code to draw the rest of the gutter but empty.
		        // To replicate this, one must scroll to the bottom of a file, then manage to have the gutter not fill the screen.
		        //
		        // But, there is a catch. The bug comes down to whether your virtualization result, has any 'overhang'
		        // at the top of the text editor.
		        //
		        // Because this code just takes the virtualization result height as if it were centered
		        // one ontop of the other with the visible content.
		        //
		        // The solution is to calculate the overhang for any virtualization elements that are rendered at the 'top-offscreen'.
		        //
		        // Editor scrolltop - 0th element's top == topOffscreenOverhang (2024-03-02)
		        
		        double topOffscreenOverhang;
		        
		        if (_activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Length > 0)
		        {
		        	// TODO: It doesn't seem 'VirtualizationLine' ever will have a null value so it is no longer nullable...
		        	// ...if any code breaks I think this is the only possible place. It is doing '?? -1' here.
		        	topOffscreenOverhang = _activeRenderBatch.ViewModel.VirtualizationResult.EntryList[0].TopInPixels;
		        }
		        else
		        {
		        	 topOffscreenOverhang = -1;
		        }
		
		        if (topOffscreenOverhang != -1)
		        {
		            // If the 'topOffscreenOverhang' was measureable, then subtract from the height of the gutter,
		            // however much of it overhangs the top offscreen.
		            heightOfGutter -= topOffscreenOverhang;
		        }
		
		        // '1' is added to the text editor's height in order to avoid rounding errors
		        if (heightOfGutter < 1 + _activeRenderBatch.ViewModel.TextEditorDimensions.Height)
		        {
		            var remainingHeightToFill = _activeRenderBatch.ViewModel.TextEditorDimensions.Height -
		                heightOfGutter +
		                ScrollbarFacts.SCROLLBAR_SIZE_IN_PIXELS;
		            
		            var remainingHeightToFillInvariantCulture = remainingHeightToFill.ToCssValue();
		
					int lastIndex;
					
					if (_activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Length > 0)
					{
						lastIndex = _activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Last().LineIndex;
					}
					else
					{
						lastIndex = -1;
					}
		
		            var imaginaryNextIndex = lastIndex + 1;
		            
		            <div class="luth_te_gutter"
		                 style="@(GetGutterStyleCss(imaginaryNextIndex)) height: @(remainingHeightToFillInvariantCulture)px;">
		            </div>
		        }
		    }
		</div>
    }

    @if (_activeRenderBatch is not null)
    {
    	<div class="luth_te_body-section"
	 		style="@_bodyStyle">
	 		
			@* RowSection.razor Open *@
			<div class="luth_te_row-section"
				id="@_activeRenderBatch.ViewModel.BodyElementId">
					    
				@* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
				@* Virtualization Open *@
				<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_left"
					 style="@Virtualization_GetStyleCssString(_activeRenderBatch.ViewModel.VirtualizationResult.LeftVirtualizationBoundary)">
				</div>
			
			    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_right"
			    	 style="@Virtualization_GetStyleCssString(_activeRenderBatch.ViewModel.VirtualizationResult.RightVirtualizationBoundary)">
				</div>
				
				<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_top"
					 style="@topVirtualizationBoundaryStyleCssString)">
				</div>
			
			    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_bottom"
			    	 style="@bottomVirtualizationBoundaryStyleCssString">
				</div>
                @* Virtualization Close *@
							                           
				@*  PresentationAndSelection Open *@
				<div class="luth_te_first-render-presentation-layer-group">

				    @foreach (var presentationKey in _activeRenderBatch.ViewModel.FirstPresentationLayerKeysList)
				    {
				    	var presentationLayer = _activeRenderBatch.Model.PresentationModelList.FirstOrDefault(x =>
				            x.TextEditorPresentationKey == presentationKey);
				            
				        if (presentationLayer is null)
				        	continue;
				    	
				        var completedCalculation = presentationLayer.CompletedCalculation;
				
						var textSpansList = completedCalculation?.TextSpanList
				            ?? Array.Empty<TextEditorTextSpan>();
				
				        IReadOnlyList<TextEditorTextModification> textModificationList = ((IReadOnlyList<TextEditorTextModification>?)completedCalculation?.TextModificationsSinceRequestList)
				            ?? Array.Empty<TextEditorTextModification>();
				
				        @if (completedCalculation is not null)
				        {
				            textSpansList = PresentationVirtualizeAndShiftTextSpans(textModificationList, completedCalculation.TextSpanList);
				
				            <div class="@presentationLayer.CssClassString">
				                @foreach (var textSpan in textSpansList)
				                {
				                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
				
				                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(boundsInPositionIndexUnits);
				
				                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
				                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
				                         i++)
				                    {
				                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
				                             style="@PresentationGetCssStyleString(
				                                    boundsInPositionIndexUnits.StartingIndexInclusive,
				                                    boundsInPositionIndexUnits.EndingIndexExclusive,
				                                    i)">
				                        </div>
				                    }
				                }
				            </div>
				        }
				    }
				</div>
				
				<div class="luth_te_text-selection-group">
				    @if (TextEditorSelectionHelper.HasSelectedText(_activeRenderBatch.ViewModel.PrimaryCursor.Selection) &&
				         _activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Length > 0)
				    {
				        var selectionBoundsInPositionIndexUnits = TextEditorSelectionHelper.GetSelectionBounds(
				            _activeRenderBatch.ViewModel.PrimaryCursor.Selection);
				
				        var selectionBoundsInRowIndexUnits = GetSelectionBoundsInRowIndexUnits(selectionBoundsInPositionIndexUnits);
				
				        var virtualLowerBoundInclusiveRowIndex = _activeRenderBatch.ViewModel.VirtualizationResult.EntryList.First().LineIndex;
				        var virtualUpperBoundExclusiveRowIndex = 1 + _activeRenderBatch.ViewModel.VirtualizationResult.EntryList.Last().LineIndex;
				
				        int useLowerBoundInclusiveRowIndex = virtualLowerBoundInclusiveRowIndex >= selectionBoundsInRowIndexUnits.lowerRowIndexInclusive
				            ? virtualLowerBoundInclusiveRowIndex
				            : selectionBoundsInRowIndexUnits.lowerRowIndexInclusive;
				
				        int useUpperBoundExclusiveRowIndex = virtualUpperBoundExclusiveRowIndex <= selectionBoundsInRowIndexUnits.upperRowIndexExclusive
				            ? virtualUpperBoundExclusiveRowIndex
				            : selectionBoundsInRowIndexUnits.upperRowIndexExclusive;
				
				        for (var i = useLowerBoundInclusiveRowIndex; i < useUpperBoundExclusiveRowIndex; i++)
				        {
							<div class="luth_te_text-selection"
							     style="@GetTextSelectionStyleCss(
							     	   selectionBoundsInPositionIndexUnits.lowerPositionIndexInclusive,
							     	   selectionBoundsInPositionIndexUnits.upperPositionIndexExclusive,
							     	   i)">
							</div>
				        }
				    }
				</div>
				                        
				<div class="luth_te_last-render-presentation-layer-group">
				
				    @foreach (var presentationKey in _activeRenderBatch.ViewModel.LastPresentationLayerKeysList)
				    {
				    	var presentationLayer = _activeRenderBatch.Model.PresentationModelList.FirstOrDefault(x =>
				            x.TextEditorPresentationKey == presentationKey);
				            
				        if (presentationLayer is null)
				        	continue;
				    
				        var completedCalculation = presentationLayer.CompletedCalculation;
				        
				        var textSpansList = completedCalculation?.TextSpanList
				            ?? Array.Empty<TextEditorTextSpan>();
				
				        IReadOnlyList<TextEditorTextModification> textModificationList = ((IReadOnlyList<TextEditorTextModification>?)completedCalculation?.TextModificationsSinceRequestList)
				            ?? Array.Empty<TextEditorTextModification>();
				
				        @if (completedCalculation is not null)
				        {
				            textSpansList = PresentationVirtualizeAndShiftTextSpans(textModificationList, completedCalculation.TextSpanList);
				
				            <div class="@presentationLayer.CssClassString">
				                @foreach (var textSpan in textSpansList)
				                {
				                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
				
				                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(boundsInPositionIndexUnits);
				
				                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
				                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
				                         i++)
				                    {
				                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
				                             style="@PresentationGetCssStyleString(
				                                    boundsInPositionIndexUnits.StartingIndexInclusive,
				                                    boundsInPositionIndexUnits.EndingIndexExclusive,
				                                    i)">
				                        </div>
				                    }
				                }
				            </div>
				        }
				    }
				</div>
				@*  PresentationAndSelection Close *@
				
				@foreach (var virtualizationLine in _activeRenderBatch.ViewModel.VirtualizationResult.EntryList)
				{
					<div class="luth_te_row"
						 style="@RowSection_GetRowStyleCss(virtualizationLine.LineIndex, virtualizationLine.LeftInPixels)">
					
						@*
							'!= 0' because the struct's int property will default to '0',
							and if there is no text then the property is unchanged from its default value.
						*@
						@if (virtualizationLine.VirtualizationSpanIndexExclusiveEnd != 0)
						{
							for (int i = virtualizationLine.VirtualizationSpanIndexInclusiveStart; i < virtualizationLine.VirtualizationSpanIndexExclusiveEnd; i++)
							{
								<span class="@_activeRenderBatch.ViewModel.VirtualizationResult.VirtualizationSpanList[i].CssClass">
						            @(_activeRenderBatch.ViewModel.VirtualizationResult.VirtualizationSpanList[i].MarkupStringText)
						        </span>
						    }
						}
						
						@if (GlobalShowNewlines && virtualizationLine.LineIndex < _activeRenderBatch.Model.LineCount)
						{
							var amountOfLeftInCharacterWidthUnits = virtualizationLine.LeftInPixels / _activeRenderBatch.ViewModel.CharAndLineMeasurements.CharacterWidth;
							
							var lengthOfRow = _activeRenderBatch.Model.GetLineLength(virtualizationLine.LineIndex, true);
							
							if (amountOfLeftInCharacterWidthUnits <= lengthOfRow)
							{
							    var rowEndingTuple = _activeRenderBatch.Model.LineEndList[virtualizationLine.LineIndex];
							
							    <span class="luth_te_newline">
							        @rowEndingTuple.LineEndKind.AsCharactersHtmlEscaped()
							    </span>
							}
						}
					</div>
				}
								
				<textarea id="@GetCursorDisplayId()"
							tabindex="@GetTabIndex()"
							class="luth_te_text-editor-cursor @BlinkAnimationCssClass @(_activeRenderBatch.Options.Keymap.GetCursorCssClassString())"
							style="@_previousGetCursorStyleCss">
				</textarea>
								
				<div class="luth_te_text-editor-caret-row"
						style="@_previousGetCaretRowStyleCss">
				</div>
			</div>
			@* RowSection.razor Close *@
		
			@* ScrollbarSection.razor Open *@
			<div class="luth_te_scrollbar-section">
			
				<div class="luth_te_scrollbar luth_te_scrollbar-horizontal"
				     id="@HORIZONTAL_ScrollbarElementId"
				     style="@_previous_HORIZONTAL_GetScrollbarHorizontalStyleCss_Result"
				     @onmousedown:stopPropagation="true"
				     @onmousedown="HORIZONTAL_HandleOnMouseDownAsync"
				     @onmousemove:stopPropagation="true"
				     @ondblclick:stopPropagation="true"
				     @onclick:stopPropagation="true"
				     @oncontextmenu:stopPropagation="true">
				    
				    <div class="luth_te_scrollbar-slider"
				         id="@HORIZONTAL_ScrollbarSliderElementId"
				         style="bottom: 0; height: @(_scrollbarSizeInPixelsCssValue)px; @_previous_HORIZONTAL_GetSliderHorizontalStyleCss_Result">
				    </div>
				</div>
				
				<div class="luth_te_scrollbar luth_te_scrollbar-vertical"
				     id="@VERTICAL_ScrollbarElementId"
				     @onmousedown:stopPropagation="true"
				     @onmousedown="VERTICAL_HandleOnMouseDownAsync"
				     @onmousemove:stopPropagation="true"
				     @ondblclick:stopPropagation="true"
				     @onclick:stopPropagation="true"
				     @oncontextmenu:stopPropagation="true">
				         
				    <div class="luth_te_scrollbar-slider"
				         id="@VERTICAL_ScrollbarSliderElementId"
				         style="left: 0; width: @(_scrollbarSizeInPixelsCssValue)px; @_previous_VERTICAL_GetSliderVerticalStyleCss_Result">
				    </div>
				</div>
			    
			    @* TODO: Color the luth_te_scrollbar-connector differently and render the 'corner icon'? *@
				<div class="luth_te_scrollbar luth_te_scrollbar-connector"
				     @onmousedown:stopPropagation="true"
				     @onmousemove:stopPropagation="true"
				     @ondblclick:stopPropagation="true"
				     @onclick:stopPropagation="true"
				     @oncontextmenu:stopPropagation="true">
				</div>
			</div>
			@* ScrollbarSection.razor Close *@
		    
		    @* TooltipDisplay.razor Open *@
		    @if (_activeRenderBatch.ViewModel.TooltipViewModel is not null)
		    {
		        var relativeX = _activeRenderBatch.ViewModel.TooltipViewModel.RelativeCoordinates.RelativeX.ToCssValue();
		        var relativeY = _activeRenderBatch.ViewModel.TooltipViewModel.RelativeCoordinates.RelativeY.ToCssValue();
		
		        <div class="luth_te_tooltip luth_set-selectable @(_activeRenderBatch.ViewModel.TooltipViewModel.CssClassString ?? string.Empty)"
		             style="left: @(relativeX)px; top: @(relativeY)px;"
		             @onmouseover="_activeRenderBatch.ViewModel.TooltipViewModel.OnMouseOver"
		             @onmousedown:stopPropagation="true"
		             @onmousemove:stopPropagation="true"
		             @ondblclick:stopPropagation="true"
		             @onclick:stopPropagation="true"
		             @oncontextmenu:stopPropagation="true">
		
		            <DynamicComponent Type="_activeRenderBatch.ViewModel.TooltipViewModel.RendererType"
		                              Parameters="_activeRenderBatch.ViewModel.TooltipViewModel.ParameterMap" />
		        </div>
		    }
		    @* TooltipDisplay.razor Close *@
		    
		    <FindOverlayDisplay RenderBatch="_activeRenderBatch"/>
		</div>
		
		if (_activeRenderBatch.ViewModel.ShowCommandBar)
	    {
	        <CommandBarDisplay RenderBatch="_activeRenderBatch"/>
	    }
    }
    else
    {
    	if (_currentRenderBatch.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (_currentRenderBatch.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (_currentRenderBatch.Options is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    }
</div>

