@using System.Collections.Immutable;
@using System.Text;
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.Common.RazorLib.Keyboards.Models;
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Icons.Models
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.Cursors.Models
@using Luthetus.TextEditor.RazorLib.Keymaps.Models.Vims;
@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.Htmls.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models
@{
	var localStoredRenderBatchTuple = _storedRenderBatchTuple;
    var renderBatchUnsafe = localStoredRenderBatchTuple.Unsafe;
    var renderBatchValidated = localStoredRenderBatchTuple.Validated;

    var cssClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
    var cssStyle = $"{renderBatchUnsafe.FontSizeInPixelsCssStyle} {renderBatchUnsafe.FontFamilyCssStyle} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
}

<div class="@cssClass" style="@cssStyle">

	@{
		var headerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.HeaderComponentType;
	
	    if (headerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="headerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }

    <div @onclick="FocusTextEditorAsync"
         @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
         @onkeydown:preventDefault="true"
         @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
         @oncontextmenu:preventDefault="true"
         @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
         @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
         @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
         @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
         @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
         @ontouchstart="ReceiveOnTouchStart"
         @ontouchmove="ReceiveOnTouchMove"
         @ontouchend="ClearTouch"
         @ontouchcancel="ClearTouch"
         @ontouchleave="ClearTouch"
         id="@ContentElementId"
         style="@(renderBatchUnsafe.HeightCssStyle) @ViewModelDisplayOptions.TextEditorStyleCssString"
         class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
         tabindex="-1">

		<div class="luth_te_measure-character-width-and-row-height-wrapper luth_te_row">
		    <div class="luth_te_measure-character-width-and-row-height luth_te_row"
		         id="@MeasureCharacterWidthAndRowHeightElementId">
		
		        @for (var i = 0; i < TEST_STRING_REPEAT_COUNT; i++)
		        {
		            <text>
		                @TEST_STRING_FOR_MEASUREMENT
		            </text>
		        }
		    </div>
		</div>
      	
        @if (ViewModelDisplayOptions.IncludeGutterComponent &&
        	 renderBatchValidated is not null)
        {
            @_gutterDriver.GetRenderFragment(renderBatchValidated);
        }

        @if (renderBatchValidated is not null)
        {
        	_bodyDriver.GetRenderFragment(renderBatchValidated);
        
        	<div class="luth_te_body-section"
		 		style="@_bodyDriver.GetBodyStyleCss(_bodyDriver._renderBatch)">
		 		
			@{
				var primaryCursor = _bodyDriver._renderBatch.ViewModel!.PrimaryCursor;
			
			    var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
			    var spaceKeyOutput = "&nbsp;";
			
			    if (_bodyDriver._root.TextEditorService.OptionsStateWrap.Value.Options.ShowWhitespace)
			    {
			        tabKeyOutput = "--->";
			        spaceKeyOutput = "Â·";
			    }
			}
		        
@* RowSection.razor Open *@
<div class="luth_te_row-section"
	id="@_bodyDriver._renderBatch.ViewModel.BodyElementId">
		    
	@* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
	@_bodyDriver._root._bodyVirtualizationDriver.GetRenderFragment(_bodyDriver._renderBatch)
				                           
	@_bodyDriver._root._presentationAndSelectionDriver.GetRenderFragment(_bodyDriver._renderBatch)
				    
	@if (_bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList.Length > 0)
	{
		var lineInformationLower = _bodyDriver._renderBatch.Model.GetLineInformation(_bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList.First().Index);
		var lineInformationUpper = _bodyDriver._renderBatch.Model.GetLineInformation(_bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList.Last().Index);
					    
		var positionIndex = lineInformationLower.StartPositionIndexInclusive;
		var lineIndex = lineInformationLower.Index;
		var lineEnd = _bodyDriver._renderBatch.Model.LineEndList[lineIndex];
					    
		var spanBuilder = new StringBuilder();
		var currentDecorationByte = (byte)0;
					    
		while (positionIndex < lineInformationUpper.UpperLineEnd.StartPositionIndexInclusive)
		{
			if (positionIndex < lineInformationUpper.UpperLineEnd.StartPositionIndexInclusive)
			{
				currentDecorationByte = _bodyDriver._renderBatch.Model.RichCharacterList[positionIndex].DecorationByte;
			}

			var virtualizedRow = _bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList[
				lineIndex - lineInformationLower.Index];
					    	
			<div class="luth_te_row"
					style="@_bodyDriver.RowSection_GetRowStyleCss(_bodyDriver._renderBatch, lineIndex, virtualizedRow.LeftInPixels)">

				@while (positionIndex < lineInformationUpper.UpperLineEnd.StartPositionIndexInclusive)
				{
					var richCharacter = _bodyDriver._renderBatch.Model.RichCharacterList[positionIndex];
					
					if (currentDecorationByte == richCharacter.DecorationByte)
				    {
				        _bodyDriver.RowSection_AppendTextEscaped(_bodyDriver._renderBatch, spanBuilder, richCharacter, tabKeyOutput, spaceKeyOutput);
				    }
				    else
				    {
				        <span class="@_bodyDriver.RowSection_GetCssClass(_bodyDriver._renderBatch, currentDecorationByte)">
				            @((MarkupString)spanBuilder.ToString())
				        </span>
				
				        spanBuilder.Clear();
				
				        _bodyDriver.RowSection_AppendTextEscaped(_bodyDriver._renderBatch, spanBuilder, richCharacter, tabKeyOutput, spaceKeyOutput);

						currentDecorationByte = richCharacter.DecorationByte;
				    }
					
					@if (_bodyDriver.GlobalShowNewlines && lineIndex < _bodyDriver._renderBatch.Model.LineCount)
					{
						var amountOfLeftInCharacterWidthUnits = virtualizedRow.LeftInPixels /
						    _bodyDriver._renderBatch.ViewModel.CharAndLineMeasurements.CharacterWidth;
						
						var lengthOfRow = _bodyDriver._renderBatch.Model.GetLineLength(lineIndex, true);
						
						if (amountOfLeftInCharacterWidthUnits <= lengthOfRow)
						{
						    var rowEndingTuple = _bodyDriver._renderBatch.Model.LineEndList[lineIndex];
						
						    <span class="luth_te_newline">
						        @rowEndingTuple.LineEndKind.AsCharactersHtmlEscaped()
						    </span>
						}
					}

					positionIndex++;

					if (positionIndex >= lineEnd.StartPositionIndexInclusive)
					{
						/* Final grouping of contiguous characters */
						<span class="@_bodyDriver.RowSection_GetCssClass(_bodyDriver._renderBatch, currentDecorationByte)">
							@((MarkupString)spanBuilder.ToString())

							@{
								spanBuilder.Clear();
							}
						</span>

						positionIndex = lineEnd.EndPositionIndexExclusive;
						lineIndex++;

						if (lineIndex < _bodyDriver._renderBatch.Model.LineEndList.Count)
							lineEnd = _bodyDriver._renderBatch.Model.LineEndList[lineIndex];
						break;
					}
				}
			</div>
		}
	}
					
	@{
		_cursorDriver.GetRenderFragment(renderBatchValidated);
					
		var leftRelativeToParentInPixelsCssStyle = string.Empty;
		var textEditorKeymap = (ITextEditorKeymap)_cursorDriver._renderBatch.Options!.Keymap!;
					    
		if (!_cursorDriver._renderBatch.Options!.UseMonospaceOptimizations)
		{
			var leftRelativeToParentInPixelsCssValue = _cursorDriver._leftRelativeToParentInPixels.ToCssValue();
			leftRelativeToParentInPixelsCssStyle = $"left: {leftRelativeToParentInPixelsCssValue}px !important;";
		}
	}
					
	<textarea id="@_cursorDriver.GetCursorDisplayId(_cursorDriver._renderBatch)"
				tabindex="@_cursorDriver.GetTabIndex(_cursorDriver._renderBatch)"
				class="luth_te_text-editor-cursor @_cursorDriver.BlinkAnimationCssClass @(textEditorKeymap.GetCursorCssClassString())"
				style="@_cursorDriver.GetCursorStyleCss() @leftRelativeToParentInPixelsCssStyle">
	</textarea>
					
	<div class="luth_te_text-editor-caret-row"
			style="@_cursorDriver.GetCaretRowStyleCss()">
	</div>
</div>
@* RowSection.razor Close *@
			
			    <ScrollbarSection RenderBatch="_bodyDriver._renderBatch"/>
			    <TooltipDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <FindOverlayDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <WidgetLayerDisplay RenderBatch="_bodyDriver._renderBatch"/>
			</div>
        }

        @if (renderBatchValidated?.ViewModel?.ShowCommandBar ?? false)
        {
            <CommandBarDisplay RenderBatch="renderBatchValidated"/>
        }
        
        @if (renderBatchUnsafe.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (renderBatchUnsafe.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (renderBatchUnsafe.Options is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    </div>
    
    @{
		var footerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.FooterComponentType;
	
	    if (footerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="footerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }
</div>
