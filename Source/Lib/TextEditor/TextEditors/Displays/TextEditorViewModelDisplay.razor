@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals

@{
    var renderBatchUnsafe = _storedRenderBatch;
    
    var renderBatchValidated = renderBatchUnsafe.IsValid ? new TextEditorRenderBatchValidated(renderBatchUnsafe) : null;
    _storedRenderBatchValidated = renderBatchValidated;

    var cssClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
    var cssStyle = $"{renderBatchUnsafe.FontSizeInPixelsCssStyle} {renderBatchUnsafe.FontFamilyCssStyle} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
}

<div class="@cssClass" style="@cssStyle">
	<CascadingValue Value="renderBatchValidated">
	    
	    @if (renderBatchUnsafe.Options is not null && !renderBatchUnsafe.Options.UseMonospaceOptimizations)
	    {
	        <div style="display: flex; position: absolute; visibility: hidden;"
	             id="@ProportionalFontMeasurementsContainerElementId">
	        </div>
	    }
	
	    @if (renderBatchUnsafe.ViewModelDisplayOptions.IncludeHeaderHelperComponent)
	    {
			<Header HeaderButtonKinds="ViewModelDisplayOptions.HeaderButtonKinds" />
	    }
	
	    <div @onclick="FocusTextEditorAsync"
	         @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
	         @onkeydown:preventDefault="true"
	         @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
	         @oncontextmenu:preventDefault="true"
	         @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
	         @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
	         @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
	         @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
	         @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
	         @ontouchstart="ReceiveOnTouchStart"
	         @ontouchmove="ReceiveOnTouchMove"
	         @ontouchend="ClearTouch"
	         @ontouchcancel="ClearTouch"
	         @ontouchleave="ClearTouch"
	         id="@ContentElementId"
	         style="@(renderBatchUnsafe.HeightCssStyle) @ViewModelDisplayOptions.TextEditorStyleCssString"
	         class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
	         tabindex="-1">
	
			@* MeasureCharacterWidthAndRowHeight.razor Open *@
			<div class="luth_te_measure-character-width-and-row-height-wrapper luth_te_row">
			    <div class="luth_te_measure-character-width-and-row-height luth_te_row"
			         id="@MeasureCharacterWidthAndRowHeightElementId">
			
			        @for (var i = 0; i < TEST_STRING_REPEAT_COUNT; i++)
			        {
			            <text>
			                @TEST_STRING_FOR_MEASUREMENT
			            </text>
			        }
			    </div>
			</div>
			@* MeasureCharacterWidthAndRowHeight Close *@
	      
            @if (ViewModelDisplayOptions.IncludeGutterComponent)
            {
                <GutterSection />
            }

            <BodySection @ref="_bodySectionComponent"/>

            @if (renderBatchValidated?.ViewModel?.ShowCommandBar ?? false)
            {
                <CommandBarDisplay RestoreFocusToTextEditor="FocusTextEditorAsync" />
            }
	        
	        @if (renderBatchUnsafe.Model is null)
		    {
		        <div>The @nameof(TextEditorModel) was null</div>
		    }
		    else if (renderBatchUnsafe.ViewModel is null)
		    {
		        <div>The @nameof(TextEditorViewModel) was null</div>
		    }
		    else if (renderBatchUnsafe.Options is null)
		    {
		        <div>The @nameof(TextEditorOptions) was null</div>
		    }
	    </div>
	
	    @if (renderBatchUnsafe.ViewModelDisplayOptions.IncludeHeaderHelperComponent)
	    {
	        <Footer />
	    }
    </CascadingValue>
</div>
