@using System.Collections.Immutable;
@using System.Text;
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.Common.RazorLib.Keyboards.Models;
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Icons.Models
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.Cursors.Models
@using Luthetus.TextEditor.RazorLib.Keymaps.Models.Vims;
@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.Htmls.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models
@using Luthetus.TextEditor.RazorLib.Virtualizations.Displays

@{
	var localStoredRenderBatchTuple = _storedRenderBatchTuple;
    var renderBatchUnsafe = localStoredRenderBatchTuple.Unsafe;
    var renderBatchValidated = localStoredRenderBatchTuple.Validated;

    var cssClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
    var cssStyle = $"{renderBatchUnsafe.FontSizeInPixelsCssStyle} {renderBatchUnsafe.FontFamilyCssStyle} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
}

<div class="@cssClass" style="@cssStyle">

	@{
		var headerComponent = renderBatchUnsafe.ViewModelDisplayOptions.HeaderComponent;
	
	    if (headerComponent is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="headerComponent"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }

    <div @onclick="FocusTextEditorAsync"
         @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
         @onkeydown:preventDefault="true"
         @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
         @oncontextmenu:preventDefault="true"
         @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
         @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
         @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
         @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
         @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
         @ontouchstart="ReceiveOnTouchStart"
         @ontouchmove="ReceiveOnTouchMove"
         @ontouchend="ClearTouch"
         @ontouchcancel="ClearTouch"
         @ontouchleave="ClearTouch"
         id="@ContentElementId"
         style="@(renderBatchUnsafe.HeightCssStyle) @ViewModelDisplayOptions.TextEditorStyleCssString"
         class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
         tabindex="-1">

		<div class="luth_te_measure-character-width-and-row-height-wrapper luth_te_row">
		    <div class="luth_te_measure-character-width-and-row-height luth_te_row"
		         id="@MeasureCharacterWidthAndRowHeightElementId">
		
		        @for (var i = 0; i < TEST_STRING_REPEAT_COUNT; i++)
		        {
		            <text>
		                @TEST_STRING_FOR_MEASUREMENT
		            </text>
		        }
		    </div>
		</div>
      	
        @if (ViewModelDisplayOptions.IncludeGutterComponent &&
        	 renderBatchValidated is not null)
        {
            @_gutterDriver.GetRenderFragment(renderBatchValidated);
        }

        @if (renderBatchValidated is not null)
        {
        	_bodyDriver.GetRenderFragment(renderBatchValidated);
        
        	<div class="luth_te_body-section"
		 		style="@_bodyDriver.GetBodyStyleCss(_bodyDriver._renderBatch)">
		 		
			@{
				var primaryCursor = _bodyDriver._renderBatch.ViewModel!.PrimaryCursor;
			
			    var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
			    var spaceKeyOutput = "&nbsp;";
			
			    if (_bodyDriver._root.TextEditorService.OptionsStateWrap.Value.Options.ShowWhitespace)
			    {
			        tabKeyOutput = "--->";
			        spaceKeyOutput = "Â·";
			    }
			}
		        
		        @* RowSection.razor Open *@
				<div class="luth_te_row-section"
		     		id="@_bodyDriver._renderBatch.ViewModel.BodyElementId">
		    
		    		@* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
		    		@_bodyDriver._root._bodyVirtualizationDriver.GetRenderFragment(_bodyDriver._renderBatch)
				                           
				    @_bodyDriver._root._presentationAndSelectionDriver.GetRenderFragment(_bodyDriver._renderBatch)
				
				    @foreach (var virtualizedRow in _bodyDriver._renderBatch.ViewModel.VirtualizationResult.EntryList)
				    {
				        <div class="luth_te_row"
				             style="@_bodyDriver.RowSection_GetRowStyleCss(_bodyDriver._renderBatch, virtualizedRow.Index, virtualizedRow.LeftInPixels)">
				            @if (virtualizedRow.Item.Any())
				            {
				                var spanBuilder = new StringBuilder();
				                var currentDecorationByte = virtualizedRow.Item.First().DecorationByte;
				
				                foreach (var richCharacter in virtualizedRow.Item)
				                {
				                    if (currentDecorationByte == richCharacter.DecorationByte)
				                    {
				                        _bodyDriver.RowSection_AppendTextEscaped(_bodyDriver._renderBatch, spanBuilder, richCharacter, tabKeyOutput, spaceKeyOutput);
				                    }
				                    else
				                    {
				                        <span class="@_bodyDriver.RowSection_GetCssClass(_bodyDriver._renderBatch, currentDecorationByte)">
				                            @((MarkupString)spanBuilder.ToString())
				                        </span>
				
				                        spanBuilder.Clear();
				
				                        _bodyDriver.RowSection_AppendTextEscaped(_bodyDriver._renderBatch, spanBuilder, richCharacter, tabKeyOutput, spaceKeyOutput);
				
				                        currentDecorationByte = richCharacter.DecorationByte;
				                    }
				                }
				
				                /* Final grouping of contiguous characters */
				                <span class="@_bodyDriver.RowSection_GetCssClass(_bodyDriver._renderBatch, currentDecorationByte)">
				                    @((MarkupString)spanBuilder.ToString())
				                </span>
				            }
				
				            @if (_bodyDriver.GlobalShowNewlines && virtualizedRow.Index < _bodyDriver._renderBatch.Model.LineCount)
				            {
				                var amountOfLeftInCharacterWidthUnits = virtualizedRow.LeftInPixels /
				                    _bodyDriver._renderBatch.ViewModel.CharAndLineMeasurements.CharacterWidth;
				
				                var lengthOfRow = _bodyDriver._renderBatch.Model.GetLineLength(virtualizedRow.Index, true);
				
				                if (amountOfLeftInCharacterWidthUnits <= lengthOfRow)
				                {
				                    var rowEndingTuple = _bodyDriver._renderBatch.Model.LineEndList[virtualizedRow.Index];
				
				                    <span class="luth_te_newline">
				                        @rowEndingTuple.LineEndKind.AsCharactersHtmlEscaped()
				                    </span>
				                }
				            }
				        </div>
				    }
					
					@{
						_cursorDriver.GetRenderFragment(renderBatchValidated);
					
						var leftRelativeToParentInPixelsCssStyle = string.Empty;
					    var textEditorKeymap = (ITextEditorKeymap)_cursorDriver._renderBatch.Options!.Keymap!;
					    
					    if (!_cursorDriver._renderBatch.Options!.UseMonospaceOptimizations)
						{
						    var leftRelativeToParentInPixelsCssValue = _cursorDriver._leftRelativeToParentInPixels.ToCssValue();
						    leftRelativeToParentInPixelsCssStyle = $"left: {leftRelativeToParentInPixelsCssValue}px !important;";
						}
					}
					
					<textarea id="@_cursorDriver.GetCursorDisplayId(_cursorDriver._renderBatch)"
					          tabindex="@_cursorDriver.GetTabIndex(_cursorDriver._renderBatch)"
					          class="luth_te_text-editor-cursor @_cursorDriver.BlinkAnimationCssClass @(textEditorKeymap.GetCursorCssClassString())"
					          style="@_cursorDriver.GetCursorStyleCss() @leftRelativeToParentInPixelsCssStyle">
					</textarea>
					
					<div class="luth_te_text-editor-caret-row"
					     style="@_cursorDriver.GetCaretRowStyleCss()">
					</div>
				</div>
			    @* RowSection.razor Close *@
			
			    <ScrollbarSection RenderBatch="_bodyDriver._renderBatch"/>
			    <TooltipDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <FindOverlayDisplay RenderBatch="_bodyDriver._renderBatch"/>
			    <WidgetLayerDisplay RenderBatch="_bodyDriver._renderBatch"/>
			</div>
        }

        @if (renderBatchValidated?.ViewModel?.ShowCommandBar ?? false)
        {
            <CommandBarDisplay RenderBatch="renderBatchValidated"/>
        }
        
        @if (renderBatchUnsafe.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (renderBatchUnsafe.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (renderBatchUnsafe.Options is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    </div>

    @if (renderBatchUnsafe.ViewModelDisplayOptions.IncludeFooterHelperComponent &&
    	 renderBatchValidated is not null)
    {
    	_footerDriver.GetRenderFragment(renderBatchValidated);
    
        <div class="luth_te_text-editor-footer @TextEditorService.ThemeCssClassString">
		    <div class="luth_te_text-editor-footer-listing">
		        @{
		            var model = _footerDriver._renderBatch.Model;
		            var viewModel = _footerDriver._renderBatch.ViewModel;
		            var options = _footerDriver._renderBatch.Options;
		
		            if (model is not null && viewModel is not null)
		            {
		                if (options is not null && options.Keymap is TextEditorKeymapVim keymapVim)
		                {
		                    var activeVimMode = keymapVim.ActiveVimMode;
		                    var pendingSentenceList = keymapVim.VimSentence.PendingSentenceList;
		                    var mostRecentSyntacticallyCompleteSentence = keymapVim.VimSentence.MostRecentSyntacticallyCompleteSentence;
		
		                    var sentenceToDisplay = pendingSentenceList.Length == 0
		                        ? mostRecentSyntacticallyCompleteSentence
		                        : pendingSentenceList;
		
		                    <div class="luth_te_text-editor-footer-entry">
		                        <div class="luth_te_text-editor-footer-name-value-pair">
		                            <div class="luth_te_text-editor-footer-name">
		                                Vim:
		                            </div>
		                            <div class="luth_te_text-editor-footer-value" title="Mode: @activeVimMode">
		                                @activeVimMode,&nbsp;
		                            </div>
		                        </div>
		
		                        <div class="luth_te_text-editor-footer-name-value-pair">
		                            <div class="luth_te_text-editor-footer-value">
		                                @{
		                                    var sentenceBuilder = new StringBuilder();
		
		                                    foreach (var vimToken in sentenceToDisplay)
		                                    {
		                                        sentenceBuilder.Append(KeyboardKeyFacts.ConvertCodeToKey(
		                                            vimToken.KeymapArgument.Code));
		                                    }
		
		                                    var minAndMaxCharacters = 4;
		                                    for (int i = minAndMaxCharacters - sentenceBuilder.Length; i > 0; i--)
		                                    {
		                                        sentenceBuilder.Append(' ');
		                                    }
		
		                                    var sentence = sentenceBuilder.ToString();
		
		                                    if (sentence.Length > minAndMaxCharacters)
		                                    {
		                                        var elipsisString = "...";
		
		                                        sentence = sentence[..(minAndMaxCharacters - elipsisString.Length)];
		                                        sentence += elipsisString;
		                                    }
		
		                                    sentence = sentence.EscapeHtml();
		                                }
		
		                                @((MarkupString)('{' + sentence + '}'))
		                            </div>
		                        </div>
		                    </div>
		                }
		
		                if (!string.IsNullOrWhiteSpace(model.FileExtension))
		                {
		                    <div class="luth_te_text-editor-footer-entry">
		                        @model.FileExtension
		                    </div>
		                }
		
		                <div class="luth_te_text-editor-footer-entry">
		                    <div class="luth_te_text-editor-footer-name-value-pair">
		                        <div class="luth_te_text-editor-footer-name">
		                            length:
		                        </div>
		                        <div class="luth_te_text-editor-footer-value"
		                             style="@_footerDriver.StyleMinWidthFromMaxLengthOfValue(model.DocumentLength)">
		                            @($"{model.DocumentLength}")
		                        </div>
		                    </div>
		
		                    <div class="luth_te_text-editor-footer-name-value-pair">
		                        <div class="luth_te_text-editor-footer-name">
		                            lines:
		                        </div>
		                        <div class="luth_te_text-editor-footer-value"
		                             style="@_footerDriver.StyleMinWidthFromMaxLengthOfValue(model.LineCount)">
		                            @($"{model.LineCount}")
		                        </div>
		                    </div>
		                </div>
		
		                <div class="luth_te_text-editor-footer-entry">
		                    <div class="luth_te_text-editor-footer-name-value-pair">
		                        <div class="luth_te_text-editor-footer-name">
		                            Ln:
		                        </div>
		
		                        @{
		                            var rowNumber = viewModel.PrimaryCursor.LineIndex + 1;
		                        }
		
		                        <div class="luth_te_text-editor-footer-value"
		                             style="@_footerDriver.StyleMinWidthFromMaxLengthOfValue(model.LineCount)">
		                            @($"{rowNumber}")
		                        </div>
		                    </div>
		
		                    <div class="luth_te_text-editor-footer-name-value-pair">
		                        <div class="luth_te_text-editor-footer-name">
		                            Col:
		                        </div>
		
		                        @{
		                            var columnNumber = viewModel.PrimaryCursor.ColumnIndex + 1;
		                        }
		
		                        <div class="luth_te_text-editor-footer-value"
		                             style="@_footerDriver.StyleMinWidthFromMaxLengthOfValue(model.MostCharactersOnASingleLineTuple.lineLength)">
		                            @($"{columnNumber}")
		                        </div>
		                    </div>
		
		                    <div class="luth_te_text-editor-footer-name-value-pair">
		                        <div class="luth_te_text-editor-footer-name">
		                            Pos:
		                        </div>
		
		                        @{
		                            var positionNumber = _footerDriver.GetPositionNumber(model, viewModel);
		                        }
		
		                        <div class="luth_te_text-editor-footer-value"
		                             style="@_footerDriver.StyleMinWidthFromMaxLengthOfValue(model.DocumentLength)">
		                            @($"{positionNumber}")
		                        </div>
		                    </div>
		                </div>
		
		                <div class="luth_te_text-editor-footer-entry">
		                    @if (model.OnlyLineEndKind is null)
		                    {
		                        <text>has:mixed </text>
		                    }
		                    else
		                    {
		                        <text>has:@model.OnlyLineEndKind.Value.AsFriendlyName() </text>
		                    }
		
		                    use:
		                    <select @onchange="_footerDriver.SelectRowEndingKindOnChange">
		                        @foreach (var rowEndingKind in LineEndKind.LineFeed.GetRowEndingsUserAllowedToUse())
		                        {
		                            <option value="@rowEndingKind.ToString()"
		                                    selected="@(model.LineEndKindPreference == rowEndingKind)">
		                                @rowEndingKind.AsFriendlyName()
		                            </option>
		                        }
		                    </select>
		                </div>
		            }
		            else
		            {
		                <div class="luth_te_text-editor-footer-entry luth_te_text-editor-footer-file-sizing">
		                    @if (model is null)
		                    {
		                        <div>The @nameof(TextEditorModel) was null</div>
		                    }
		                    else if (viewModel is not null)
		                    {
		                        <div>The @nameof(TextEditorViewModel) was null</div>
		                    }
		                </div>
		            }
		        }
		    </div>
		</div>
    }
</div>
