@using System.Text;
@using System.Diagnostics;
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.CustomEvents.Models
@using Luthetus.Common.RazorLib.Keyboards.Models;
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Icons.Models
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.TextEditor.RazorLib.Keymaps.Models;
@using Luthetus.TextEditor.RazorLib.Cursors.Models
@using Luthetus.TextEditor.RazorLib.Keymaps.Models.Vims;
@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.Htmls.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models

@* ScrollbarSection.razor *@
@using Luthetus.Common.RazorLib.Dimensions;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals;

@* TooltipDisplay.razor *@
@using Luthetus.Common.RazorLib.Dimensions.Models;

@* PresentationAndSelectionStaticRenderFragments.razor *@
@using Luthetus.TextEditor.RazorLib.Decorations.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Cursors.Models


@using Luthetus.Common.RazorLib.Installations.Models
				
@{
    var renderBatchUnsafe = _currentRenderBatch;
    var renderBatchValidated = _activeRenderBatch;

    var cssClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
    var cssStyle = $"{renderBatchUnsafe.FontSizeInPixelsCssStyle} {renderBatchUnsafe.FontFamilyCssStyle} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
    
    // var startTime = Stopwatch.GetTimestamp();
}

<div class="@cssClass" style="@cssStyle">

	@{
		var headerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.HeaderComponentType;
	
	    if (headerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="headerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
    }

    <div @onclick="FocusTextEditorAsync"
         @onkeydown="EventUtil.AsNonRenderingEventHandler<KeyboardEventArgs>(ReceiveOnKeyDown)"
         @onkeydown:preventDefault="true"
         @oncontextmenu="EventUtil.AsNonRenderingEventHandler(ReceiveOnContextMenu)"
         @oncontextmenu:preventDefault="true"
         @onmousedown="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseDown)"
         @onmousemove="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseMove)"
         @onmouseout="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveContentOnMouseOut)"
         @ondblclick="EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(ReceiveOnDoubleClick)"
         @onwheel="EventUtil.AsNonRenderingEventHandler<WheelEventArgs>(ReceiveOnWheel)"
         @ontouchstart="ReceiveOnTouchStart"
         @ontouchmove="ReceiveOnTouchMove"
         @ontouchend="ClearTouch"
         @ontouchcancel="ClearTouch"
         @ontouchleave="ClearTouch"
         id="@ContentElementId"
         style="@(renderBatchUnsafe.HeightCssStyle) @ViewModelDisplayOptions.TextEditorStyleCssString"
         class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
         tabindex="-1">

		<div class="luth_te_measure-character-width-and-row-height-wrapper luth_te_row">
		    <div class="luth_te_measure-character-width-and-row-height luth_te_row"
		         id="@MeasureCharacterWidthAndRowHeightElementId">
		
		        @for (var i = 0; i < TEST_STRING_REPEAT_COUNT; i++)
		        {
		            <text>
		                @TEST_STRING_FOR_MEASUREMENT
		            </text>
		        }
		    </div>
		</div>
      	
        @if (ViewModelDisplayOptions.IncludeGutterComponent && renderBatchValidated is not null)
        {
            <div class="luth_te_gutter-section"
			      style="@(GetGutterSectionStyleCss(renderBatchValidated))"
			      id="@renderBatchValidated.ViewModel.GutterElementId">
			      
                @* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
                
                @* Virtualization Open *@
				<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_top"
					 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.TopVirtualizationBoundary)">
				</div>
			
			    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_bottom"
			    	 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.BottomVirtualizationBoundary)">
				</div>
                @* Virtualization Close *@
			    
			    @foreach (var virtualizedRow in renderBatchValidated.ViewModel.VirtualizationResult.EntryList)
			    {
			        <div class="luth_te_gutter"
			             style="@(GetGutterStyleCss(renderBatchValidated, virtualizedRow.LineIndex))">
			            @(virtualizedRow.LineIndex + 1)
			        </div>
			    }
			    
			    @{
			        var heightOfGutter = renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Length *
			                             renderBatchValidated.ViewModel.CharAndLineMeasurements.LineHeight;
			
			        // The scrollbar is off when one uses the 'if (heightOfGutter...)' code to draw the rest of the gutter but empty.
			        // To replicate this, one must scroll to the bottom of a file, then manage to have the gutter not fill the screen.
			        //
			        // But, there is a catch. The bug comes down to whether your virtualization result, has any 'overhang'
			        // at the top of the text editor.
			        //
			        // Because this code just takes the virtualization result height as if it were centered
			        // one ontop of the other with the visible content.
			        //
			        // The solution is to calculate the overhang for any virtualization elements that are rendered at the 'top-offscreen'.
			        //
			        // Editor scrolltop - 0th element's top == topOffscreenOverhang (2024-03-02)
			        
			        double topOffscreenOverhang;
			        
			        if (renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Length > 0)
			        {
			        	// TODO: It doesn't seem 'VirtualizationLine' ever will have a null value so it is no longer nullable...
			        	// ...if any code breaks I think this is the only possible place. It is doing '?? -1' here.
			        	topOffscreenOverhang = renderBatchValidated.ViewModel.VirtualizationResult.EntryList[0].TopInPixels;
			        }
			        else
			        {
			        	 topOffscreenOverhang = -1;
			        }
			
			        if (topOffscreenOverhang != -1)
			        {
			            // If the 'topOffscreenOverhang' was measureable, then subtract from the height of the gutter,
			            // however much of it overhangs the top offscreen.
			            heightOfGutter -= topOffscreenOverhang;
			        }
			
			        // '1' is added to the text editor's height in order to avoid rounding errors
			        if (heightOfGutter < 1 + renderBatchValidated.ViewModel.TextEditorDimensions.Height)
			        {
			            var remainingHeightToFill = renderBatchValidated.ViewModel.TextEditorDimensions.Height -
			                heightOfGutter +
			                ScrollbarFacts.SCROLLBAR_SIZE_IN_PIXELS;
			            
			            var remainingHeightToFillInvariantCulture = remainingHeightToFill.ToCssValue();
			
						int lastIndex;
						
						if (renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Length > 0)
						{
							lastIndex = renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Last().LineIndex;
						}
						else
						{
							lastIndex = -1;
						}
			
			            var imaginaryNextIndex = lastIndex + 1;
			            
			            <div class="luth_te_gutter"
			                 style="@(GetGutterStyleCss(renderBatchValidated, imaginaryNextIndex)) height: @(remainingHeightToFillInvariantCulture)px;">
			            </div>
			        }
			    }
			</div>
        }

        @if (renderBatchValidated is not null)
        {        
        	<div class="luth_te_body-section"
		 		style="@GetBodyStyleCss(renderBatchValidated)">
		 		
				@{
					var primaryCursor = renderBatchValidated.ViewModel!.PrimaryCursor;
				}
			        
				@* RowSection.razor Open *@
				<div class="luth_te_row-section"
					id="@renderBatchValidated.ViewModel.BodyElementId">
						    
					@* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
					@* Virtualization Open *@
					<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_left"
						 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.LeftVirtualizationBoundary)">
					</div>
				
				    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_right"
				    	 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.RightVirtualizationBoundary)">
					</div>
					
					<div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_top"
						 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.TopVirtualizationBoundary)">
					</div>
				
				    <div class="luth_te_virtualization-boundary-display luth_te_virtualization-boundary-display_bottom"
				    	 style="@Virtualization_GetStyleCssString(renderBatchValidated.ViewModel.VirtualizationResult.BottomVirtualizationBoundary)">
					</div>
	                @* Virtualization Close *@
								                           
					@*  PresentationAndSelection Open *@
					<div class="luth_te_first-render-presentation-layer-group">
	
					    @{
					        var FIRST_presentationLayerOrderedByRankAscending =
					        	GetTextEditorPresentationModels(renderBatchValidated, renderBatchValidated.ViewModel.FirstPresentationLayerKeysList)
					        	.OrderBy(x => x.Rank).ToList();
					    }
					
					    @foreach (var presentationLayer in FIRST_presentationLayerOrderedByRankAscending)
					    {
					        var completedCalculation = presentationLayer.CompletedCalculation;
					
							var textSpansList = completedCalculation?.TextSpanList
					            ?? Array.Empty<TextEditorTextSpan>();
					
					        IReadOnlyList<TextEditorTextModification> textModificationList = ((IReadOnlyList<TextEditorTextModification>?)completedCalculation?.TextModificationsSinceRequestList)
					            ?? Array.Empty<TextEditorTextModification>();
					
					        @if (completedCalculation is not null)
					        {
					            textSpansList = PresentationVirtualizeAndShiftTextSpans(renderBatchValidated, textModificationList, completedCalculation.TextSpanList);
					
					            <div class="@presentationLayer.CssClassString">
					                @foreach (var textSpan in textSpansList)
					                {
					                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
					
					                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(renderBatchValidated, renderBatchValidated.Model, boundsInPositionIndexUnits);
					
					                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
					                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
					                         i++)
					                    {
					                        var rowIndex = i;
					
					                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
					                             style="@PresentationGetCssStyleString(
					                             	   renderBatchValidated,
					                                    boundsInPositionIndexUnits.StartingIndexInclusive,
					                                    boundsInPositionIndexUnits.EndingIndexExclusive,
					                                    rowIndex)">
					                        </div>
					                    }
					                }
					            </div>
					        }
					    }
					</div>
					
					<div class="luth_te_text-selection-group">
					    @if (TextEditorSelectionHelper.HasSelectedText(renderBatchValidated.ViewModel.PrimaryCursor.Selection) &&
					         renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Length > 0)
					    {
					        var selectionBoundsInPositionIndexUnits = TextEditorSelectionHelper.GetSelectionBounds(
					            renderBatchValidated.ViewModel.PrimaryCursor.Selection);
					
					        var selectionBoundsInRowIndexUnits = GetSelectionBoundsInRowIndexUnits(renderBatchValidated, selectionBoundsInPositionIndexUnits);
					
					        var virtualLowerBoundInclusiveRowIndex = renderBatchValidated.ViewModel.VirtualizationResult.EntryList.First().LineIndex;
					        var virtualUpperBoundExclusiveRowIndex = 1 + renderBatchValidated.ViewModel.VirtualizationResult.EntryList.Last().LineIndex;
					
					        int useLowerBoundInclusiveRowIndex = virtualLowerBoundInclusiveRowIndex >= selectionBoundsInRowIndexUnits.lowerRowIndexInclusive
					            ? virtualLowerBoundInclusiveRowIndex
					            : selectionBoundsInRowIndexUnits.lowerRowIndexInclusive;
					
					        int useUpperBoundExclusiveRowIndex = virtualUpperBoundExclusiveRowIndex <= selectionBoundsInRowIndexUnits.upperRowIndexExclusive
					            ? virtualUpperBoundExclusiveRowIndex
					            : selectionBoundsInRowIndexUnits.upperRowIndexExclusive;
					
					        for (var badIndex = useLowerBoundInclusiveRowIndex; badIndex < useUpperBoundExclusiveRowIndex; badIndex++)
					        {
					            var rowIndex = badIndex;
					            var textSelectionStyleCss = string.Empty;
					
					            if (renderBatchValidated.Options.UseMonospaceOptimizations)
					            {
					                textSelectionStyleCss = GetTextSelectionStyleCss(
					                	renderBatchValidated,
					                    selectionBoundsInPositionIndexUnits.lowerPositionIndexInclusive,
					                    selectionBoundsInPositionIndexUnits.upperPositionIndexExclusive,
					                    rowIndex);
					            }
								
								<div class="luth_te_text-selection"
								     style="@textSelectionStyleCss">
								</div>
					        }
					    }
					</div>
					                        
					<div class="luth_te_last-render-presentation-layer-group">
					
					    @{
					        var LAST_presentationLayerOrderedByRankAscending = 
					        	GetTextEditorPresentationModels(renderBatchValidated, renderBatchValidated.ViewModel.LastPresentationLayerKeysList)
					        	.OrderBy(x => x.Rank).ToList();
					    }
					
					    @foreach (var presentationLayer in LAST_presentationLayerOrderedByRankAscending)
					    {
					        var completedCalculation = presentationLayer.CompletedCalculation;
					        
					        var textSpansList = completedCalculation?.TextSpanList
					            ?? Array.Empty<TextEditorTextSpan>();
					
					        IReadOnlyList<TextEditorTextModification> textModificationList = ((IReadOnlyList<TextEditorTextModification>?)completedCalculation?.TextModificationsSinceRequestList)
					            ?? Array.Empty<TextEditorTextModification>();
					
					        @if (completedCalculation is not null)
					        {
					            textSpansList = PresentationVirtualizeAndShiftTextSpans(renderBatchValidated, textModificationList, completedCalculation.TextSpanList);
					
					            <div class="@presentationLayer.CssClassString">
					                @foreach (var textSpan in textSpansList)
					                {
					                    var boundsInPositionIndexUnits = (textSpan.StartingIndexInclusive, textSpan.EndingIndexExclusive);
					
					                    var boundsInRowIndexUnits = PresentationGetBoundsInRowIndexUnits(renderBatchValidated, renderBatchValidated.Model, boundsInPositionIndexUnits);
					
					                    for (var i = boundsInRowIndexUnits.FirstRowToSelectDataInclusive;
					                         i < boundsInRowIndexUnits.LastRowToSelectDataExclusive;
					                         i++)
					                    {
					                        var rowIndex = i;
					
					                        <div class="@PresentationGetCssClass(presentationLayer, textSpan.DecorationByte)"
					                             style="@PresentationGetCssStyleString(
					                                    renderBatchValidated,
					                                    boundsInPositionIndexUnits.StartingIndexInclusive,
					                                    boundsInPositionIndexUnits.EndingIndexExclusive,
					                                    rowIndex)">
					                        </div>
					                    }
					                }
					            </div>
					        }
					    }
					</div>
					@*  PresentationAndSelection Close *@
					
					@foreach (var virtualizationLine in renderBatchValidated.ViewModel.VirtualizationResult.EntryList)
					{
						<div class="luth_te_row"
							 style="@RowSection_GetRowStyleCss(renderBatchValidated, virtualizationLine.LineIndex, virtualizationLine.LeftInPixels)">
						
							@*
								'!= 0' because the struct's int property will default to '0',
								and if there is no text then the property is unchanged from its default value.
							*@
							@if (virtualizationLine.VirtualizationSpanIndexExclusiveEnd != 0)
							{
								// WARNING: Making this foreach loop into a for loop causes it to run 300 to 500 times slower.
						    	//          Presumably this is due to cache misses?
								foreach (var virtualizationSpan in renderBatchValidated.ViewModel.VirtualizationResult.VirtualizationSpanList
										 	.Skip(virtualizationLine.VirtualizationSpanIndexInclusiveStart)
											 .Take(virtualizationLine.VirtualizationSpanIndexExclusiveEnd - virtualizationLine.VirtualizationSpanIndexInclusiveStart))
								{
									<span class="@virtualizationSpan.CssClass">
							            @((MarkupString)virtualizationSpan.Text)
							        </span>
							    }
							}
							
							@if (GlobalShowNewlines && virtualizationLine.LineIndex < renderBatchValidated.Model.LineCount)
							{
								var amountOfLeftInCharacterWidthUnits = virtualizationLine.LeftInPixels / renderBatchValidated.ViewModel.CharAndLineMeasurements.CharacterWidth;
								
								var lengthOfRow = renderBatchValidated.Model.GetLineLength(virtualizationLine.LineIndex, true);
								
								if (amountOfLeftInCharacterWidthUnits <= lengthOfRow)
								{
								    var rowEndingTuple = renderBatchValidated.Model.LineEndList[virtualizationLine.LineIndex];
								
								    <span class="luth_te_newline">
								        @rowEndingTuple.LineEndKind.AsCharactersHtmlEscaped()
								    </span>
								}
							}
						</div>
					}
					
					@{
						var leftRelativeToParentInPixelsCssStyle = string.Empty;
						var textEditorKeymap = (ITextEditorKeymap)renderBatchValidated.Options!.Keymap!;
									    
						if (!renderBatchValidated.Options!.UseMonospaceOptimizations)
						{
							var leftRelativeToParentInPixelsCssValue = _leftRelativeToParentInPixels.ToCssValue();
							leftRelativeToParentInPixelsCssStyle = $"left: {leftRelativeToParentInPixelsCssValue}px !important;";
						}
					}
									
					<textarea id="@GetCursorDisplayId(renderBatchValidated)"
								tabindex="@GetTabIndex(renderBatchValidated)"
								class="luth_te_text-editor-cursor @BlinkAnimationCssClass @(textEditorKeymap.GetCursorCssClassString())"
								style="@GetCursorStyleCss(renderBatchValidated) @leftRelativeToParentInPixelsCssStyle">
					</textarea>
									
					<div class="luth_te_text-editor-caret-row"
							style="@GetCaretRowStyleCss(renderBatchValidated)">
					</div>
				</div>
				@* RowSection.razor Close *@
			
				@* ScrollbarSection.razor Open *@
				<div class="luth_te_scrollbar-section">
				
					<div class="luth_te_scrollbar luth_te_scrollbar-horizontal"
					     id="@HORIZONTAL_ScrollbarElementId"
					     style="@HORIZONTAL_GetScrollbarHorizontalStyleCss(renderBatchValidated)"
					     @onmousedown:stopPropagation="true"
					     @onmousedown="HORIZONTAL_HandleOnMouseDownAsync"
					     @onmousemove:stopPropagation="true"
					     @ondblclick:stopPropagation="true"
					     @onclick:stopPropagation="true"
					     @oncontextmenu:stopPropagation="true">
					    
					    <div class="luth_te_scrollbar-slider"
					         id="@HORIZONTAL_ScrollbarSliderElementId"
					         style="bottom: 0; height: @(ScrollbarFacts.SCROLLBAR_SIZE_IN_PIXELS.ToCssValue())px; @HORIZONTAL_GetSliderHorizontalStyleCss(renderBatchValidated)">
					    </div>
					</div>
					
					<div class="luth_te_scrollbar luth_te_scrollbar-vertical"
					     id="@VERTICAL_ScrollbarElementId"
					     @onmousedown:stopPropagation="true"
					     @onmousedown="VERTICAL_HandleOnMouseDownAsync"
					     @onmousemove:stopPropagation="true"
					     @ondblclick:stopPropagation="true"
					     @onclick:stopPropagation="true"
					     @oncontextmenu:stopPropagation="true">
					         
					    <div class="luth_te_scrollbar-slider"
					         id="@VERTICAL_ScrollbarSliderElementId"
					         style="left: 0; width: @(ScrollbarFacts.SCROLLBAR_SIZE_IN_PIXELS.ToCssValue())px; @VERTICAL_GetSliderVerticalStyleCss(renderBatchValidated)">
					    </div>
					</div>
				    
				    @* TODO: Color the luth_te_scrollbar-connector differently and render the 'corner icon'? *@
					<div class="luth_te_scrollbar luth_te_scrollbar-connector"
					     @onmousedown:stopPropagation="true"
					     @onmousemove:stopPropagation="true"
					     @ondblclick:stopPropagation="true"
					     @onclick:stopPropagation="true"
					     @oncontextmenu:stopPropagation="true">
					</div>
				</div>
				@* ScrollbarSection.razor Close *@
			    
			    @* TooltipDisplay.razor Open *@
			    @{
					var localViewModel = renderBatchValidated.ViewModel?.TooltipViewModel;
				}
			
			    @if (localViewModel is not null)
			    {
			        var relativeX = localViewModel.RelativeCoordinates.RelativeX.ToCssValue();
			        var relativeY = localViewModel.RelativeCoordinates.RelativeY.ToCssValue();
			
			        <div class="luth_te_tooltip luth_set-selectable @(localViewModel.CssClassString ?? string.Empty)"
			             style="left: @(relativeX)px; top: @(relativeY)px;"
			             @onmouseover="localViewModel.OnMouseOver"
			             @onmousedown:stopPropagation="true"
			             @onmousemove:stopPropagation="true"
			             @ondblclick:stopPropagation="true"
			             @onclick:stopPropagation="true"
			             @oncontextmenu:stopPropagation="true">
			
			            <DynamicComponent Type="localViewModel.RendererType"
			                              Parameters="localViewModel.ParameterMap" />
			        </div>
			    }
			    @* TooltipDisplay.razor Close *@
			    
			    
			    <FindOverlayDisplay RenderBatch="renderBatchValidated"/>
			    
			    @* 
			    Widgets aren't being used at the moment
			    
			    <WidgetLayerDisplay RenderBatch="renderBatchValidated"/>
			    *@
			</div>
        }

        @if (renderBatchValidated?.ViewModel?.ShowCommandBar ?? false)
        {
            <CommandBarDisplay RenderBatch="renderBatchValidated"/>
        }
        
        @if (renderBatchUnsafe.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (renderBatchUnsafe.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (renderBatchUnsafe.Options is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    </div>
    
    @{
		var footerComponentType = renderBatchUnsafe.ViewModelDisplayOptions.FooterComponentType;
	
	    if (footerComponentType is not null && renderBatchValidated is not null)
	    {
	    	<ShouldRenderBoundary>
	    		<DynamicComponent Type="footerComponentType"
	    						  Parameters="DependentComponentParameters"/>
	    	</ShouldRenderBoundary>
	    }
	    
	    // LuthetusDebugSomething.SetTextEditorUi(Stopwatch.GetElapsedTime(startTime));
    }
</div>
