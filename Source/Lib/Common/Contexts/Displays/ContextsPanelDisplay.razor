@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.Keys.Models;

<ContextBoundary ContextRecord="ContextFacts.ActiveContextsContext"
                 ClassCssString="luth_ide_active-contexts"
                 StyleCssString="height: 100%">

    @{ var contextState = ContextService.GetContextState(); }

	@*
	This components title must always show because
	the locking of inspected context is done from a button
	in the title.
	=======================================
	@if (AppOptionsService.ShowPanelTitles)
	{
    }
    *@
    <div class="luth_ide_section-title">
        @{ var isInspecting = GetIsInspecting(contextState); }

        <button class="luth_button"
                style="display: inline;"
                @onclick="() => DispatchToggleInspectActionOnClick(isInspecting)">
                
            @{
            	var iconDriver = new IconDriver(
					AppOptionsService.GetAppOptionsState().Options.IconSizeInPixels,
					AppOptionsService.GetAppOptionsState().Options.IconSizeInPixels);
            }

            @if (isInspecting)
            {
                @IconLockFragment.Render(iconDriver)
            }
            else
            {
                @IconInspectFragment.Render(iconDriver)
            }
        </button>

        ActiveContextsDisplay
    </div>

    <div class="luth_ide_section-body @AppOptionsService.ShowPanelTitlesCssClass">

        @{
            var contextKeysToRender = contextState.InspectedContextHeirarchy
                ?? contextState.FocusedContextHeirarchy;
                
            var seenContextKeyList = new HashSet<Key<ContextRecord>>();
        }


		@foreach (var contextKey in contextKeysToRender.KeyList)
        {
        	if (seenContextKeyList.Add(contextKey))
        	{
        		<ContextDisplay @key="contextKey"
                            	ContextKey="contextKey" />
            	<hr />
        	}
            else
            {
            	<div>ERROR: duplicate key when rendering @(nameof(ContextDisplay))</div>
            }
        }
        
    </div>
</ContextBoundary>
