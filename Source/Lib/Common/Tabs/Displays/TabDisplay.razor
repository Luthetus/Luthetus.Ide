@using Luthetus.Common.RazorLib.Notifications.Models;

@{
	var localTabViewModel = Tab;
	var localTabGroup = localTabViewModel.TabGroup;
	
	if (localTabGroup is null)
	{
		NotificationHelper.DispatchError(
	        "TabGroup was null",
	        "TabGroup was null",
	        CommonApi.ComponentRendererApi,
	        CommonApi.NotificationApi,
	        TimeSpan.FromSeconds(6));
	}
	
	var dynamicCss = localTabGroup?.GetDynamicCss(localTabViewModel);
}

<button class="luth_polymorphic-tab luth_button luth_unselectable @IsActiveCssClass @dynamicCss @GetIsBeingDraggedCssClassString() @CssClassString"
		style="@GetDraggableCssStyleString() @CssStyleString"
		id="@HtmlId"
        title="@localTabViewModel.TitleVerbose"
		@ref="_tabButtonElementReference"
		@onclick:stopPropagation="true"
		@onclick="e => OnClick(localTabViewModel, e)"
		@onmousedown:stopPropagation="true"
		@onmousedown:preventDefault="true"
        @onmousedown="HandleOnMouseDownAsync"
        @onmouseup="HandleOnMouseUp"
        @onmouseout="HandleOnMouseOutAsync"
		@oncontextmenu:preventDefault="true"
		@oncontextmenu:stopPropagation="true"
		@oncontextmenu="e => ManuallyPropagateOnContextMenu(e, localTabViewModel)">

	<span>@localTabViewModel.Title</span>

	@if (ShouldDisplayCloseButton)
	{
		<button class="luth_button luth_button-close"
	            @onclick:stopPropagation="true"
	            @onclick="CloseTabOnClickAsync">
	        
	        @{
				var appOptionsState = CommonApi.AppOptionApi.GetAppOptionsState();
	        
	        	var iconDriver = new IconDriver(
					appOptionsState.Options.IconSizeInPixels,
					appOptionsState.Options.IconSizeInPixels);
	        }
	        @IconCloseFragment.Render(iconDriver)
    	</button>
	}
</button>
