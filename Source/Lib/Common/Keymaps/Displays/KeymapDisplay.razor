@using System.Text;

<div class="luth_ide_keymap">
    @{
        var keyKeymapKvpsList = Keymap.GetKeyKeyValuePairList()
            .OrderByDescending(x => x.Key.LayerKey.Guid)
            .ThenBy(x => x.Value.DisplayName)
            .ToArray();
    }

    <table>
        <thead>
            <tr>
                <th>
                    Command
                </th>
                <th>
                    Key
                </th>
                <th>
                    Code
                </th>
                <th>
                    When
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in keyKeymapKvpsList)
            {
                if (kvp.Value.InternalIdentifier == "defaults_do-nothing-discard")
                {
                    // TODO: This is hacky but "defaults_do-nothing-discard" fills the UI because its used when filling some empty keybinds for the text editor (2023-10-03)
                    continue;
                }

                var keymapArgs = kvp.Key;
                var commandNoType = kvp.Value;

                var keyDisplayStringsList = new List<string>();
                var keyTitleBuilder = new StringBuilder();

                var codeDisplayStringsList = new List<string>();
                var codeTitleBuilder = new StringBuilder();

                @if (keymapArgs.CtrlKey)
                {
                    if (keyTitleBuilder.Length != 0)
                        keyTitleBuilder.Append("+");

                    keyDisplayStringsList.Add("Ctrl");
                    keyTitleBuilder.Append("Control");

                    if (codeTitleBuilder.Length != 0)
                        codeTitleBuilder.Append("+");

                    codeDisplayStringsList.Add("Ctrl");
                    codeTitleBuilder.Append("Control");
                }

                @if (keymapArgs.ShiftKey)
                {
                    if (keyTitleBuilder.Length != 0)
                        keyTitleBuilder.Append("+");

                    keyDisplayStringsList.Add("Shift");
                    keyTitleBuilder.Append("Shift");

                    if (codeTitleBuilder.Length != 0)
                        codeTitleBuilder.Append("+");

                    codeDisplayStringsList.Add("Shift");
                    codeTitleBuilder.Append("Shift");
                }

                @if (keymapArgs.AltKey)
                {
                    if (keyTitleBuilder.Length != 0)
                        keyTitleBuilder.Append("+");

                    keyDisplayStringsList.Add("Alt");
                    keyTitleBuilder.Append("Alt");

                    if (codeTitleBuilder.Length != 0)
                        codeTitleBuilder.Append("+");

                    codeDisplayStringsList.Add("Alt");
                    codeTitleBuilder.Append("Alt");
                }

                @if (keymapArgs.Key is not null)
                {
                    if (keyTitleBuilder.Length != 0)
                        keyTitleBuilder.Append("+");

                    keyDisplayStringsList.Add(keymapArgs.Key);
                    keyTitleBuilder.Append(keymapArgs.Key);
                }
                else
                {
                    keyDisplayStringsList.Clear();
                    keyDisplayStringsList.Add("unset");

                    keyTitleBuilder.Clear();
                    keyTitleBuilder.Append("unset");
                }

                @if (keymapArgs.Code is not null)
                {
                    if (codeTitleBuilder.Length != 0)
                        codeTitleBuilder.Append("+");

                    codeDisplayStringsList.Add(keymapArgs.Code);
                    codeTitleBuilder.Append(keymapArgs.Code);
                }
                else
                {
                    codeDisplayStringsList.Clear();
                    codeDisplayStringsList.Add("unset");

                    codeTitleBuilder.Clear();
                    codeTitleBuilder.Append("unset");
                }

                <tr class="luth_ide_keymap-entry">
                    <td class="luth_ide_keymap-entry-argument"
                        title="@commandNoType.InternalIdentifier">

                        @commandNoType.DisplayName
                    </td>
                    <td class="luth_ide_keymap-entry-command"
                        title="@keyTitleBuilder.ToString()">

                        @for (int i = 0; i < keyDisplayStringsList.Count; i++)
                        {
                            var index = i;

                            if (index != 0)
                            {
                                <text>+</text>
                            }

                            <em class="luth_em">
                                @keyDisplayStringsList[index]
                            </em>
                        }
                    </td>
                    <td class="luth_ide_keymap-entry-command"
                        title="@codeTitleBuilder.ToString()">

                        @for (int i = 0; i < codeDisplayStringsList.Count; i++)
                        {
                            var index = i;

                            if (index != 0)
                            {
                                <text>+</text>
                            }

                            <em class="luth_em">
                                @codeDisplayStringsList[index]
                            </em>
                        }
                    </td>

                    @{
                        var keymapState = KeymapStateWrap.Value;
                        var keymapLayer = keymapState.KeymapLayerList.FirstOrDefault(x => x.Key == keymapArgs.LayerKey);
                    }

                    @if (keymapArgs.LayerKey == keymapLayer.Key)
                    {
                        <td>
                            @keymapLayer.DisplayName
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>