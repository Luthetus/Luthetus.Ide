@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.Dimensions.Models;
@using Luthetus.Common.RazorLib.Installations.Displays
@using Luthetus.Common.RazorLib.Panels.Displays
@using Luthetus.Common.RazorLib.Panels.Models;
@using Luthetus.Common.RazorLib.Resizes.Displays
@using Luthetus.Common.RazorLib.StateHasChangedBoundaries.Displays;
@using Luthetus.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Luthetus.Ide.RazorLib.Installations.Displays
@using Luthetus.Ide.RazorLib.Shareds.Displays.Internals
@using Luthetus.TextEditor.RazorLib.Installations.Displays

@inherits LayoutComponentBase

<ContextBoundary ContextRecord="ContextFacts.GlobalContext"
                 ClassCssString="@($"luth_ide_main-layout {UnselectableClassCss} {AppOptionsService.ThemeCssClassString} {TextEditorService.ThemeCssClassString}")"
                 StyleCssString="@($"{AppOptionsService.FontSizeCssStyleString} {AppOptionsService.FontFamilyCssStyleString} {AppOptionsService.ColorSchemeCssStyleString}")">

    <LuthetusCommonInitializer />
    <LuthetusTextEditorInitializer />
    <LuthetusIdeInitializer />

    <ShouldRenderBoundary>
        @{
            // The 'useDevelopmentDisplay' boolean is odd.
            // 
            // I want to isolate a component that I'm developing,
            // yet maintain much of the existing Ide logic.
            // 
            // There are various ways that can accomplish something similar to this.
            // 
            // But, this is a simple way, and the if statement evaluation
            // when this UI StateHasChanged, is expected to be negligible.
            var useDevelopmentDisplay = false;
        }

        @if (!useDevelopmentDisplay)
        {        
            <IdeHeader/>

            <StateHasChangedBoundary @ref="_bodyAndFooterStateHasChangedBoundaryComponent">
                <IdeBody BodyElementDimensions="_bodyElementDimensions" />

                <ResizableRow TopElementDimensions="_bodyElementDimensions"
                              BottomElementDimensions="PanelFacts.GetBottomPanelGroup(PanelService.GetPanelState()).ElementDimensions"
                              ReRenderFuncAsync="_bodyAndFooterStateHasChangedBoundaryComponent.InvokeStateHasChangedAsync" />

                <PanelGroupDisplay PanelGroupKey="PanelFacts.BottomPanelGroupKey"
                              CssClassString="luth_ide_footer"
                              AdjacentElementDimensions="_bodyElementDimensions"
                              DimensionAttributeKind="DimensionAttributeKind.Height"
                              ReRenderSelfAndAdjacentElementDimensionsFunc="_bodyAndFooterStateHasChangedBoundaryComponent.InvokeStateHasChangedAsync">

                    <JustifyEndRenderFragment>
                    	@{ var ideMainLayoutState = IdeMainLayoutService.GetIdeMainLayoutState(); }
                    	
                    	@foreach (var footerJustifyEndComponent in ideMainLayoutState.FooterJustifyEndComponentList)
                    	{
                    		<DynamicComponent Type="footerJustifyEndComponent.ComponentType"
                    						  Parameters="footerJustifyEndComponent.ComponentParameterMap"/>
                    	}
                    </JustifyEndRenderFragment>
                </PanelGroupDisplay>
            </StateHasChangedBoundary>
        }
        else
        {
            <IdeDevelopmentDisplay/>
        }
    </ShouldRenderBoundary>
</ContextBoundary>