@using System.Reflection;

<div class="luth_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Luthetus/Luthetus.Ide">
            
           Luthetus.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="luth_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="luth_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="luth_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="luth_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedLuthetusAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Luthetus") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Luthetus"))
				.ToList();

			referencedLuthetusAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedLuthetusAssembly in referencedLuthetusAssembliesList)
        {
            if (referencedLuthetusAssembly.Name is null)
                continue;

            <div>
                v
                <em class="luth_em" title="Version">
                    @(referencedLuthetusAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedLuthetusAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedLuthetusAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(ContinuousBackgroundTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BlockingBackgroundTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>

	<hr/>
	
	<div>
        LuthetusHostingInformation:
		<div>
            <div>
                @nameof(LuthetusHostingInformation.LuthetusHostingKind): @LuthetusHostingInformation.LuthetusHostingKind
            </div>
            <div>
                @nameof(LuthetusHostingInformation.LuthetusPurposeKind): @LuthetusHostingInformation.LuthetusPurposeKind
            </div>
            <div>
                @nameof(LuthetusHostingInformation.BackgroundTaskService):
                @if (LuthetusHostingInformation.BackgroundTaskService is null)
                {
                    <text>null</text>
                }
                else
                {
                    <text>NOT-null</text>
                }
            </div>
            <div>
                @nameof(LuthetusHostingInformation.GetMainWindowScreenDpiFunc): @LuthetusHostingInformation.GetMainWindowScreenDpiFunc.Invoke()
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
			<div>
                <div>v <em class="luth_em">0.9.6.7 </em> (WIP_DATE)</div>
                <ul>
					<li>Goto definition, respect the original cursor's syntax node kind.</li>
					<li>
						C# Parser:
						<ul>
							<li>'record struct' storage modifier kind</li>
							<li>TypeClauseNode with '?'</li>
							<li>Ambiguous property definition</li>
							<li>Constructor invocation within an expression.</li>
							<li>Record struct primary constructor</li>
							<li>ExplicitCastNode.cs 'Ex: (MyClass)someObject'</li>
							<li>Verbatim string progress</li>
							<li>Constructor ': this(...) or base(...)'</li>
							<li>'params' keyword</li>
							<li>Constructor where clause (progress)</li>
							<li>For statement progress</li>
							<li>Foreach statement progress</li>
							<li>Lock statement progress</li>
							<li>While statement progress</li>
							<li>Do-while statement progress</li>
							<li>Switch statement progress</li>
							<li>Try-catch-finally statement progress</li>
							<li>
								Breadth first parsing progress
								(Parse all the definitions in a given scope prior to
								parsing an inner scope where appropriate i.e.: class definitions)
							</li>
						</ul>
					</li>
					<li>Never throw an exception in the parser, just show a diagnostic</li>
					<li>Goto definition for 'SyntaxKind.ConstructorSymbol'</li>
					<li>ContextMenu goto definition, scroll cursor into view</li>
					<li>After context menu picked SetCursorShouldBlink(false)</li>
					<li>Add: ThrottleOptimized&lt;TArgs&gt;</li>
                	<li>Drag optimizations (struct drag event actions)</li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.9.6.6 </em> (2024-10-03)</div>
                <ul>
                    <li>
                        Text Editor NuGet Package v3.1.0
                        <a target="_blank" href="https://www.nuget.org/packages/Luthetus.TextEditor/">(nuget.org)</a>
                    </li>
                    <li>
                        Fix: fatal exception from v0.9.6.5 update (when opening code search dialog).
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.9.6.5 </em> (2024-10-03)</div>
                <ul>
                	<li>
                        On startup, re-open the last open '.sln' file
                    </li>
					<li>Horizontally virtualize on a line by line basis, and only if the individual line is long.</li>
					<li>Virtualization result is an array of lines (was a list)</li>
					<li>Change: SetModelAndViewModelRangeAction to a struct</li>
					<li>Change: TextEditorTextSpan to record-struct</li>
					<li>
						TextEditorState.Main.cs uses private-mutable dictionaries to store
						text editor models/viewmodels.
						(They used to be ImmutableList(s))
					</li>
                	<li>
                        Add: IAppDataService.cs
                    </li>
                    <li>
						TextEditor: Add: ITextEditorDependentComponent.cs
							("low priority" rendering of accessory components to the text editor).
						Render header throttled at 1 second.
						Render footer throttled at 250 milliseconds.
					</li>
                    <li>
						Move git to its own project
					</li>
					<li>
						Add: FooterJustifyEndComponent.cs
					</li>
					<li>
						Fix: Git origin/branch only settable once
					</li>
                    <li>
						Add: Simple PythonCompilerService
					</li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.6.4 </em> (2024-09-21)</div>
                <ul>
                	<li>
                        Text Editor NuGet Package v2.7.0
                        <a target="_blank" href="https://www.nuget.org/packages/Luthetus.TextEditor/">(nuget.org)</a>
                    </li>
                	<li>
                    	Common: BrowserResizeInterop
                    </li>
                	<li>
                        TextEditor: User Agent resize events trigger remeasure
                    </li>
                    <li>
                    	TextEditor: Changing text editor's font-size triggers re-measure 
                    </li>
                    <li>
                    	TextEditor: After re-remeasuring, reload the virtualization result.
                    </li>
                    <li>
                    	TextEditor: InputTextEditorFontSize.razor changes
                    </li>
                    <li>
                    	TextEditor: ScrollbarSection.razor vertical reset point while dragging
                    </li>
                    <li>
                    	TextEditor: DISTANCE_TO_RESET_SCROLL_POSITION is 300px
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.9.6.3 </em> (2024-09-19)</div>
                <ul>
                	<li>
                        Text Editor NuGet Package v2.6.0
                        <a target="_blank" href="https://www.nuget.org/packages/Luthetus.TextEditor/">(nuget.org)</a>
                    </li>
                	<li>
                        Fix: Text Editor, scrollWidth and scrollHeight becoming smaller (and how this impacts scrollLeft and scrollTop)
                    </li>
                    <li>
                        Fix: Text Editor, negative scrollLeft and negative scrollTop
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.6.2 </em> (2024-09-18)</div>
                <ul>
                    <li>
                        Add to CommonOptions.cs: ResizeHandleWidthInPixels, and ResizeHandleHeightInPixels.
                    </li>
                    <li>
                        Notifications render width and height based on character width, and character height units of measurement,
                        rather than a fixed pixel value. This lets the notifications scale with font-size.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.6.1 </em> (2024-09-17)</div>
                <ul>
                    <li>
                        Don't move scrollbar for terminal unless the cursor position changed
                    </li>
                    <li>
                        Implement the TerminalWebsite progress
                    </li>
                    <li>
                        Clear button no longer affects an active command
                    </li>
                    <li>
                        Add: ITerminal.ClearFireAndForget()
                    </li>
                    <li>
                        Fix: IDE settings into a table
                    </li>
                    <li>
                        Change: common inputs into a table
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.6.0 </em> (2024-09-13)</div>
                <ul>
                    <li>
                        Update Photino.Blazor NuGet Package to v3.1.9 (from v2.6.0).
                        The version of Ubuntu tested with this change had massive usability improvements,
                        and appears to perform better too.
                        Previously, caret browsing was turned on, and it wasn't obvious how to turn it off,
                        this was creating a whole mess of problems and no longer seems an issue.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.5.1 </em> (2024-09-07)</div>
                <ul>
                    <li>
                        Fix tab drag off text editor group sometimes cause fatal exception due
                        to null reference exception.
                    </li>
                    <li>
                        Fix text erroneously written out when holding non-shift modifier(s).
                        (i.e.: { 'Ctrl' + 'c' } to copy writing out the letter 'c' to the text editor)
                    </li>
                    <li>
                        Given the change "Fix text erroneously written out when holding non-shift modifier(s)."
                        all previously added hacks to fix this have been removed for the more correct implementation.
                    </li>
                    <li>
                        Add: DropdownHelper.cs, less code duplication of dropdown logic.
                    </li>
                    <li>
                        Sort codebehinds '.cs' '.css'; DragInitializer.razor is an example where it isn't sorted. (Linux specific)
                    </li>
                    <li>
						Invoke codebehinds for the C# project immediate children.
                    </li>
                    <li>
						Fix add '.razor.cs' for an existing '.razor' file, on linux it won't show until restart IDE.
                    </li>
                    <li>
						Fix remove '.razor.cs' for an existing '.razor' file, but the expansion chevron still renders.
                    </li>
                    <li>
						Sort RelatedFilesQuickPick { 'F7' }
                    </li>
                    <li>
						RelatedFilesQuickPick set initial menu index to the opened file
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.5.0 </em> (2024-09-05)</div>
                <ul>
                    <li>
                        Fix: deletion of text that spans multiple partitions.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.4.0 </em> (2024-09-02)</div>
                <ul>
                    <li>
                        Home key has indentation logic
                    </li>
                    <li>
                        Fix cursor blinking
                    </li>
                    <li>
                        Fix change keymap without having to reload
                    </li>
                    <li>
                        Track additionally, the 'Key' of a keyboard event args (previously only was tracking the 'Code')
                    </li>
                    <li>
                        Change ITextEditorWork implementations and ResourceUri to structs
                    </li>
                    <li>
                        When running the IDE natively, disable various browser keybinds;
                        for example: 'F5' won't refresh the webview.
                    </li>
                    <li>
                        Fix various 'Vim' keybind bugs. It isn't fully functional yet.
                    </li>
                    <li>
                        Add: WidgetDisplay.razor
                    </li>
                    <li>
                        ContextSwitchDisplay.razor progress (keybind: Ctrl + Tab)
                    </li>
                    <li>
                        CommandBarDisplay.razor progress (keybind: Ctrl + P)
                    </li>
                    <li>
                        Use more recent dropdown code for text editor autocomplete and context menu.
                        The newer dropdown code moves itself so it stays on screen (if it initially rendered offscreen).
                    </li>
                    <li>
                        Fix: return focus to text editor after picking a menu option in autocomplete or context menu.
                    </li>
                    <li>
                        Start code snippet logic.
                    </li>
                    <li>
                        Fix: line endings breaking due to a Post to the ITextEditorService which makes an edit,
                             but then throws an exception within the same Post.
                    </li>
                    <li>
                        Fix: Gutter width changes causing the text editor measurements to be incorrect.
                    </li>
                    <li>
                    	Fix: deletion of lines will now scroll by the amount of lines deleted.
           				    Previously, this was breaking the virtualization result until one triggered a re-calculation.
                    </li>
                    <li>
					    Fix: Keybinds first try to match on a JavaScript 'event.key' so to speak. Then, as a fallback
					           they will now try to match on 'event.code' so to speak.
					           Previously, on Ubuntu, if one remapped the CapsLock key to Escape, it would not work
					           in the IDE at various places. This has been fixed.
                    </li>
                    <li>
	                	Text editor events now use structs to transmit event data. This is expected to be a large optimization,
	                		as it tends that high turnover 'class' objects bring performance issues due to the garbage collection overhead.
                    </li>
                    <li>
                    	Text editor's OnKeyDownLateBatching event uses a fixed size array for batching events, rather than what previously
					        was a List&lt;T&gt;. This is expected to be a large optimization, as it tends that high turnover 'class' objects bring
					        performance issues due to the garbage collection overhead. As well, it tends to be the case that no more than
					        3 or 4 keyboard events ever get batched together. So the fixed size array is '8' keyboard events can be made into
					        a single batch.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.3.0 </em> (2024-08-16)</div>
                <ul>
                    <li>
                        <a target="_blank" href="https://www.nuget.org/packages/Luthetus.TextEditor/">
                            Text Editor NuGet Package v2.0.0
                        </a>

                        --(
                        <a target="_blank" href="https://github.com/Luthetus/Luthetus.Ide/blob/main/Docs/TextEditor/installation.md">
                            installation.md
                        </a>
                        )
                    </li>
                	<li>
                        Fix cursor "randomly" losing focus
                    </li>
                    <li>
                        Re-write virtualization in C# (it was previously done with JavaScript)
                    </li>
                    <li>
                        Change RichCharacter.cs to a struct (it was previously a class).
                    </li>
                    <li>
                        Change ITextEditorModel.RichCharacterList to an array (it was previously an ImmutableList).
                    </li>
                    <li>
                        Fix typing at start of file (position index 0) a non letter or digit.
                    </li>
                    <li>
                    	Fix text editor context menu crashing when closing
                    </li>
                    <li>
                    	Fix out of sync syntax highlighting.
                    </li>
                    <li>
                    	IDE uses 60% less memory after various struct/array optimizations.
                    </li>
                    <li>
                    	IDE "feels" an order of magnitude faster after various Blazor optimizations and
                    	struct/array optimizations (which reduce the garbage collection overhead thus improving performance greatly).
                    </li>
                    <li>
                    	Fix terminal ContinueWithFunc not firing.
                    </li>
                    <li>
                    	Click Output panel diagnostic to open file.
                    </li>
                    <li>
                    	Send test output to Output panel for it to be parsed for any errors by using
                    	right click menu on test explorer tree view node.
                    </li>
                    <li>
                    	Keybind { Ctrl + . } for quick actions / refactors context menu.
                    </li>
                    <li>
                    	Refactor: generate parameterless constructor when cursor on a property within a class.
                    </li>
                    <li>
                    	Add: TerminalWebsite.cs implementation of ITerminal to avoid confusion when running website demo.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.2.0 </em> (2024-08-11)</div>
                <ul>
                	<li>
                		Bug in this version: The text editor appears to be "randomly" losing focus.
                		I presume I can fix this, but I am sitting on too many code changes at the moment,
                		so I'll accept these changes then look at this bug.
                	</li>
                	<li>
                		Cursor blinking is purposefully broken at the moment. It was
                		causing rerenders to all the actively rendered text editors because I wanted them
                		to synchronize the blinking. I still want it synchronized but I just want to revisit the
                		implementation I think it could be better.
                	</li>
                	<li>
                		Use RenderFragment(s) instead of Blazor components were applicable
                		to avoid the overhead of a component, while still using razor markup.
                	</li>
                	<li>
                		Rewrite terminal code. (this rewrite is still in progress, not finished).
                	</li>
                    <li>
                        If a file does not save properly, make it obvious to the user
                    </li>
                    <li>
                        Only invoke 'FinalizePost' in the events if there were no unhandled exceptions.
                    </li>
                    <li>
                        Rename 'IEditContext.cs' to 'ITextEditorEditContext.cs'
                    </li>
                    <li>
                        Change Luthetus libraries to net8.0
                    </li>
                    <li>
                        Reference Fluxor v6 NuGet package
                    </li>
                    <li>
                        <a href="https://github.com/tryphotino/photino.Blazor/issues/124"
                           target="_blank">
                           Having issues with upgrading Photino.Blazor from v2.6 to a higher version
                        </a>

                        For me, I can run 'dotnet run -c Release' on v2.6
                        But if I try to 'dotnet publish -c Release' then 
                        'cd bin/Release/net8.0/publish/' then 'dotnet ./Luthetus.Ide.Photino.dll'
                        I get 'Unhandled exception. System.MissingMethodException: Method not found: 'PhotinoNET.PhotinoWindow Photino.Blazor.PhotinoBlazorApp.get_MainWindow()'.
Aborted (core dumped)'
                        If I use v3 something then I get Load("/") "/" not found
                        or something.

                        I hate writing notes to myself right before I go to bed but hopefully
                        this is enough to jog my memory after getting some sleep.

                        (it worked on Windows, but not on Ubuntu when using v3)
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.1.0 </em> (2024-07-24)</div>
                <ul>
                	<li>
                        IBackgroundTask service received immense optimizations.
                        Some of these optimizations include: no Task.Delay between
                        background task invocations, and attempt to run
                        a task synchronously, and only await it if it did not finish
                        synchronously.
                    </li>
                	<li>
                        The text editor's 'IEditContext' received immense optimizations.
                        Some of these optimizations include: do not instantiate a 'Func'
                        for every method that takes an 'IEditContext' as a parameter.
                    </li>
                    <li>
                        'Find All' tool shows results in a tree view.
                        As well, it shows multiple results per file,
                        preview text for each result,
                        and moves cursor to the respective result within the file.
                    </li>
                    <li>
                        '@@onkeydown="EventUtil.AsNonRenderingEventHandler&lt;KeyboardEventArgs&gt;(ReceiveOnKeyDown)"'
                        This avoids unnecessary rendering due to implicit state has changed in the Blazor events.
                        Note: the exact version this was added in is uncertain. It was recent though.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.0.0 </em> (2024-07-18)</div>
                <ul>
                    <li>
                        IDE is language "neutral". All ".NET" support was moved
                        to its own project 'Luthetus.Extensions.DotNet.csproj'.
                        This allows one to pick and choose which programming languages the IDE supports.
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
