@using System.Reflection;

<div class="luth_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Luthetus/Luthetus.Ide">
            
           Luthetus.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="luth_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="luth_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="luth_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="luth_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedLuthetusAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Luthetus") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Luthetus"))
				.ToList();

			referencedLuthetusAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedLuthetusAssembly in referencedLuthetusAssembliesList)
        {
            if (referencedLuthetusAssembly.Name is null)
                continue;

            <div>
                v
                <em class="luth_em" title="Version">
                    @(referencedLuthetusAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedLuthetusAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedLuthetusAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(ContinuousBackgroundTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BlockingBackgroundTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>

	<hr/>
	
	<div>
        LuthetusHostingInformation:
		<div>
            <div>
                @nameof(LuthetusHostingInformation.LuthetusHostingKind): @LuthetusHostingInformation.LuthetusHostingKind
            </div>
            <div>
                @nameof(LuthetusHostingInformation.LuthetusPurposeKind): @LuthetusHostingInformation.LuthetusPurposeKind
            </div>
            <div>
                @nameof(LuthetusHostingInformation.BackgroundTaskService):
                @if (LuthetusHostingInformation.BackgroundTaskService is null)
                {
                    <text>null</text>
                }
                else
                {
                    <text>NOT-null</text>
                }
            </div>
            <div>
                @nameof(LuthetusHostingInformation.GetMainWindowScreenDpiFunc): @LuthetusHostingInformation.GetMainWindowScreenDpiFunc.Invoke()
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
			<div>
                <div>v <em class="luth_em">0.9.4.0 </em> (WIP_DATE)</div>
                <ul>
                    <li>
                        Home key has indentation logic
                    </li>
                    <li>
                        Fix cursor blinking
                    </li>
                    <li>
                        Fix change keymap without having to reload
                    </li>
                    <li>
                        Track additionally, the 'Key' of a keyboard event args (previously only was tracking the 'Code')
                    </li>
                    <li>
                        Change ITextEditorWork implementations and ResourceUri to structs
                    </li>
                    <li>
                        When running the IDE natively, disable various browser keybinds;
                        for example: 'F5' won't refresh the webview.
                    </li>
                    <li>
                        Fix various 'Vim' keybind bugs. It isn't fully functional yet.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.3.0 </em> (2024-08-16)</div>
                <ul>
                    <li>
                        <a target="_blank" href="https://www.nuget.org/packages/Luthetus.TextEditor/">
                            Text Editor NuGet Package v2.0.0
                        </a>

                        --(
                        <a target="_blank" href="https://github.com/Luthetus/Luthetus.Ide/blob/main/Docs/TextEditor/installation.md">
                            installation.md
                        </a>
                        )
                    </li>
                	<li>
                        Fix cursor "randomly" losing focus
                    </li>
                    <li>
                        Re-write virtualization in C# (it was previously done with JavaScript)
                    </li>
                    <li>
                        Change RichCharacter.cs to a struct (it was previously a class).
                    </li>
                    <li>
                        Change ITextEditorModel.RichCharacterList to an array (it was previously an ImmutableList).
                    </li>
                    <li>
                        Fix typing at start of file (position index 0) a non letter or digit.
                    </li>
                    <li>
                    	Fix text editor context menu crashing when closing
                    </li>
                    <li>
                    	Fix out of sync syntax highlighting.
                    </li>
                    <li>
                    	IDE uses 60% less memory after various struct/array optimizations.
                    </li>
                    <li>
                    	IDE "feels" an order of magnitude faster after various Blazor optimizations and
                    	struct/array optimizations (which reduce the garbage collection overhead thus improving performance greatly).
                    </li>
                    <li>
                    	Fix terminal ContinueWithFunc not firing.
                    </li>
                    <li>
                    	Click Output panel diagnostic to open file.
                    </li>
                    <li>
                    	Send test output to Output panel for it to be parsed for any errors by using
                    	right click menu on test explorer tree view node.
                    </li>
                    <li>
                    	Keybind { Ctrl + . } for quick actions / refactors context menu.
                    </li>
                    <li>
                    	Refactor: generate parameterless constructor when cursor on a property within a class.
                    </li>
                    <li>
                    	Add: TerminalWebsite.cs implementation of ITerminal to avoid confusion when running website demo.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.2.0 </em> (2024-08-11)</div>
                <ul>
                	<li>
                		Bug in this version: The text editor appears to be "randomly" losing focus.
                		I presume I can fix this, but I am sitting on too many code changes at the moment,
                		so I'll accept these changes then look at this bug.
                	</li>
                	<li>
                		Cursor blinking is purposefully broken at the moment. It was
                		causing rerenders to all the actively rendered text editors because I wanted them
                		to synchronize the blinking. I still want it synchronized but I just want to revisit the
                		implementation I think it could be better.
                	</li>
                	<li>
                		Use RenderFragment(s) instead of Blazor components were applicable
                		to avoid the overhead of a component, while still using razor markup.
                	</li>
                	<li>
                		Rewrite terminal code. (this rewrite is still in progress, not finished).
                	</li>
                    <li>
                        If a file does not save properly, make it obvious to the user
                    </li>
                    <li>
                        Only invoke 'FinalizePost' in the events if there were no unhandled exceptions.
                    </li>
                    <li>
                        Rename 'IEditContext.cs' to 'ITextEditorEditContext.cs'
                    </li>
                    <li>
                        Change Luthetus libraries to net8.0
                    </li>
                    <li>
                        Reference Fluxor v6 NuGet package
                    </li>
                    <li>
                        <a href="https://github.com/tryphotino/photino.Blazor/issues/124"
                           target="_blank">
                           Having issues with upgrading Photino.Blazor from v2.6 to a higher version
                        </a>

                        For me, I can run 'dotnet run -c Release' on v2.6
                        But if I try to 'dotnet publish -c Release' then 
                        'cd bin/Release/net8.0/publish/' then 'dotnet ./Luthetus.Ide.Photino.dll'
                        I get 'Unhandled exception. System.MissingMethodException: Method not found: 'PhotinoNET.PhotinoWindow Photino.Blazor.PhotinoBlazorApp.get_MainWindow()'.
Aborted (core dumped)'
                        If I use v3 something then I get Load("/") "/" not found
                        or something.

                        I hate writing notes to myself right before I go to bed but hopefully
                        this is enough to jog my memory after getting some sleep.

                        (it worked on Windows, but not on Ubuntu when using v3)
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.1.0 </em> (2024-07-24)</div>
                <ul>
                	<li>
                        IBackgroundTask service received immense optimizations.
                        Some of these optimizations include: no Task.Delay between
                        background task invocations, and attempt to run
                        a task synchronously, and only await it if it did not finish
                        synchronously.
                    </li>
                	<li>
                        The text editor's 'IEditContext' received immense optimizations.
                        Some of these optimizations include: do not instantiate a 'Func'
                        for every method that takes an 'IEditContext' as a parameter.
                    </li>
                    <li>
                        'Find All' tool shows results in a tree view.
                        As well, it shows multiple results per file,
                        preview text for each result,
                        and moves cursor to the respective result within the file.
                    </li>
                    <li>
                        '@@onkeydown="EventUtil.AsNonRenderingEventHandler&lt;KeyboardEventArgs&gt;(ReceiveOnKeyDown)"'
                        This avoids unnecessary rendering due to implicit state has changed in the Blazor events.
                        Note: the exact version this was added in is uncertain. It was recent though.
                    </li>
                </ul>
            </div>
			<div>
                <div>v <em class="luth_em">0.9.0.0 </em> (2024-07-18)</div>
                <ul>
                    <li>
                        IDE is language "neutral". All ".NET" support was moved
                        to its own project 'Luthetus.Extensions.DotNet.csproj'.
                        This allows one to pick and choose which programming languages the IDE supports.
                    </li>
                </ul>
            </div>

        </div>
    </div>
</div>
