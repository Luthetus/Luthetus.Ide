@using Luthetus.Common.RazorLib.Icons.Models;
@using Luthetus.Ide.RazorLib.Terminals.Models;
@using Luthetus.Extensions.DotNet.CSharpProjects.Models;
@using Luthetus.Extensions.DotNet.Websites.ProjectTemplates.Models;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="luth_ide_c-sharp-project-form luth_ide_form @GetCssClassForActivePanelKind(_viewModel.ActivePanelKind)">
    
    @{ _viewModel.DotNetSolutionModel = DotNetSolutionModel; }

    @if (_viewModel.DotNetSolutionModel is null)
    {
        <div>@nameof(_viewModel.DotNetSolutionModel) is null</div>
    }
    else
    {
    	var iconDriver = new IconDriver(
			AppOptionsStateWrap.Value.Options.IconSizeInPixels,
			AppOptionsStateWrap.Value.Options.IconSizeInPixels);
    
        <div class="luth_ide_c-sharp-project-form-top-inputs">
            <div class="luth_ide_form-group">
                <div class="luth_ide_form-label">
                    Project name:
                </div>

                <div class="luth_ide_form-value">
                    <input class="luth_ide_input luth_ide_input-text"
                           style="height: 2em;"
                           placeholder="Project name"
                    @bind="_viewModel.CSharpProjectNameValue"
                    @bind:event="oninput" />
                </div>
            </div>
        </div>

        <div class="luth_ide_c-sharp-project-form-middle-inputs">
            <div class="luth_ide_form-group luth_ide_disable-display-flex">
                <div class="luth_ide_form-label luth_ide_c-sharp-project-form-sticky">
                    <div class="luth_ide_c-sharp-project-form-sticky-left-side">
                        Project template:

                        <span class="luth_ide_c-sharp-project-form-tabs">
                            @foreach (var panelKind in Enum.GetValues<CSharpProjectFormPanelKind>())
                            {
                                <button class="luth_ide_panel-tab luth_button luth_tab @GetIsActiveCssClassString(panelKind)"
                                @onclick="() => _viewModel.ActivePanelKind = panelKind">

                                    @switch (panelKind)
                                    {
                                        case CSharpProjectFormPanelKind.Graphical:
                                            @: Graphically
                                            break;
                                        case CSharpProjectFormPanelKind.Manual:
                                            @: Manually
                                            break;
                                    }
                                </button>
                            }
                        </span>
                    </div>

                    <div class="luth_ide_c-sharp-project-form-sticky-right-side">
                        @if (_viewModel.ActivePanelKind == CSharpProjectFormPanelKind.Graphical)
                        {
                            <div class="luth_ide_graphical-project-template-search-container">
                                <input class="luth_ide_input luth_ide_input-text"
                                       type="text"
                                       placeholder="Search"
                                       autocapitalize="none"
                                       autocorrect="off"
                                       autocomplete="off"
                                       spellcheck="false"
                                @bind="_viewModel.SearchInput"
                                @bind:event="oninput" />
                            </div>
                        }
                    </div>
                </div>

                <div class="luth_ide_form-value">
                    <div class="luth_ide_c-sharp-project-form-panel">
                        @if (_viewModel.ActivePanelKind == CSharpProjectFormPanelKind.Graphical)
                        {
                            <div class="luth_ide_graphical-project-template-inputs">
                                @if (_viewModel.IsReadingProjectTemplates)
                                {
                                    <div>
                                        Reading project templates
                                        @IconLoadingFragment.Render(iconDriver)
                                    </div>
                                }
                                else
                                {
                                    <div class="luth_ide_graphical-project-template-container">
                                        @{
                                            var filteredProjectTemplateList = _viewModel.ProjectTemplateList;
                                            var localSearchInput = _viewModel.SearchInput;

                                            if (!string.IsNullOrWhiteSpace(localSearchInput))
                                            {
                                                filteredProjectTemplateList = _viewModel.ProjectTemplateList.Where(pt =>
                                                pt.TemplateName!.Contains(localSearchInput, StringComparison.InvariantCultureIgnoreCase) ||
                                                pt.ShortName!.Contains(localSearchInput, StringComparison.InvariantCultureIgnoreCase) ||
                                                pt.Language!.Contains(localSearchInput, StringComparison.InvariantCultureIgnoreCase) ||
                                                pt.Tags!.Contains(localSearchInput, StringComparison.InvariantCultureIgnoreCase))
                                                .ToList();
                                            }

                                            foreach (var projectTemplate in filteredProjectTemplateList)
                                            {
                                                <ProjectTemplateDisplay ProjectTemplate="projectTemplate"
                                                                        ShortNameOfSelectedProjectTemplate="@_viewModel.ProjectTemplateShortNameValue"
                                                                        OnProjectTemplateSelectedEventCallback="pt => _viewModel.ProjectTemplateShortNameValue = pt.ShortName!" />
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else if (_viewModel.ActivePanelKind == CSharpProjectFormPanelKind.Manual)
                        {
                            <div class="luth_ide_manual-project-template-inputs">
                                <div class="luth_ide_form-group">
                                    <div class="luth_ide_form-label">
                                        Template name:
                                    </div>

                                    <div class="luth_ide_form-value">
                                        <input class="luth_ide_input luth_ide_input-text"
                                               style="height: 2em;"
                                               placeholder="Template name"
                                        @bind="_viewModel.ProjectTemplateShortNameValue"
                                        @bind:event="oninput" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="luth_ide_c-sharp-project-form-bottom-inputs">
            <div class="luth_ide_form-group">
                <div class="luth_ide_form-label">
                    Directory:
                </div>

                <div class="luth_ide_form-value"
                     style="display: flex;">

                    <input class="luth_ide_input luth_ide_input-text"
                           style="height: 2em;"
                           placeholder="Parent directory"
                    @bind="_viewModel.ParentDirectoryNameValue"
                    @bind:event="oninput" />

                    <button class="luth_button"
                            @onclick='() => RequestInputFileForParentDirectory("Directory for new C# Project")'>
			            @IconFolderFragment.Render(iconDriver)
                    </button>
                </div>
            </div>

            <div class="luth_ide_form-group">
                <div class="luth_ide_form-label">
                    Optional parameters:
                </div>

                <div class="luth_ide_form-value">
                    <input class="luth_ide_input luth_ide_input-text"
                           style="height: 2em;"
                           placeholder="Optional parameters"
                    @bind="_viewModel.OptionalParametersValue"
                    @bind:event="oninput" />
                </div>
            </div>
        </div>

        <div class="luth_ide_form-output-container">
            <div class="luth_ide_form-output-entry">
                <span class="luth_ide_form-output-entry-label">
                    Project&nbsp;Name:
                </span>
                <span class="luth_ide_form-output-entry-value">
                    <em class="luth_em">@_viewModel.CSharpProjectNameDisplay</em>
                    .csproj
                </span>
            </div>

            <div class="luth_ide_form-output-entry">
                <span class="luth_ide_form-output-entry-label">
                    Template&nbsp;Name:
                </span>
                <span class="luth_ide_form-output-entry-value">
                    <em class="luth_em">@_viewModel.ProjectTemplateShortNameDisplay</em>
                </span>
            </div>

            <div class="luth_ide_form-output-entry">
                <span class="luth_ide_form-output-entry-label">
                    Optional&nbsp;Parameters:
                </span>
                <span class="luth_ide_form-output-entry-value">
                    <em class="luth_em">@_viewModel.OptionalParametersDisplay</em>
                </span>
            </div>

            <div class="luth_ide_form-output-entry">
                <span class="luth_ide_form-output-entry-label">
                    Directory&nbsp;Absolute&nbsp;File&nbsp;Path:
                </span>
                <span class="luth_ide_form-output-entry-value">
                    <em class="luth_em">@_viewModel.ParentDirectoryNameDisplay</em>
                </span>
            </div>
        </div>

        <div class="luth_ide_c-sharp-project-form-submit-section">
            <div class="luth_ide_c-sharp-project-form-command-section">
                Command:
                <div>
                    <em class="luth_em">
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        @_viewModel.FormattedNewCSharpProjectCommand.Value
                        &nbsp;\
                    </em>

                    <br />

                    <em class="luth_em">
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        @_viewModel.FormattedAddExistingProjectToSolutionCommand.Value
                    </em>
                </div>
            </div>

            <button class="luth_button"
            @onclick="StartNewCSharpProjectCommandOnClick">
                Run
            </button>
        </div>
    }
</div>