@using Luthetus.TextEditor.RazorLib.CompilerServices.GenericLexer.Decoration;
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax;
@using Luthetus.TextEditor.RazorLib.Lexers.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;

<div class="luth_ide_syntax">

    @{
        var cssClassForColor = string.Empty;
        var decorationMapper = DecorationMapperRegistry.GetDecorationMapper(ExtensionNoPeriodFacts.C_SHARP_CLASS);
    }

    @if (Syntax is SyntaxToken syntaxToken)
    {
        cssClassForColor = decorationMapper.Map(syntaxToken.TextSpan.DecorationByte);
    }
    else if (Syntax is ISyntaxNode syntaxNode)
    {
        switch (Syntax.SyntaxKind)
        {
            case SyntaxKind.TypeClauseNode:
            case SyntaxKind.TypeDefinitionNode:
            case SyntaxKind.TypeSymbol:
                cssClassForColor = decorationMapper.Map((byte)GenericDecorationKind.Type);
                break;
        }
    }

    <div class="luth_ide_syntax-title @cssClassForColor">
        @Syntax.SyntaxKind
    </div>

    <div class="luth_ide_syntax-body">
        @{
            var type = Syntax.GetType();
            var typeFullName = type.FullName;

            if (typeFullName is not null)
            {
                if (!_propertyInfoMap.ContainsKey(typeFullName))
                    _propertyInfoMap.Add(typeFullName, type.GetProperties());

                var propertyInfoList = _propertyInfoMap[typeFullName];

                foreach (var propertyInfo in propertyInfoList)
                {
                    if (propertyInfo.PropertyType.IsPrimitive || propertyInfo.PropertyType == typeof(string))
                    {
                        <SyntaxValueEditorDisplay Syntax="Syntax" PropertyInfo="propertyInfo" />
                    }
                    else
                    {
                        var untypedPropertyValue = propertyInfo.GetValue(Syntax);

                        if (untypedPropertyValue is null)
                        {
                            <div>
                                <span class="luth_te_property">@propertyInfo.Name</span>
                                <span class="luth_te_keyword">is null</span>
                            </div>
                        }
                        else
                        {
                            var childPropertyType = untypedPropertyValue.GetType();

                            if (typeof(ISyntax).IsAssignableFrom(childPropertyType))
                            {
                                <SyntaxDisplay Syntax="(ISyntax)untypedPropertyValue" />
                            }
                            else
                            {
                                if (childPropertyType == typeof(TextEditorTextSpan))
                                {
                                    <SyntaxTextSpanDisplay TextSpan="(TextEditorTextSpan)untypedPropertyValue" />
                                }
                                else
                                {
                                    <div>@propertyInfo.PropertyType.Name : @propertyInfo.GetValue(Syntax)</div>
                                }
                            }
                        }
                    }
                }
            }
        }
    </div>
</div>

