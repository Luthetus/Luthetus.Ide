@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Symbols
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Interfaces
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.Nodes.Enums

@{ var localSymbol = Symbol; }

<div class="luth_te_symbol">
	<ErrorBoundary>
		<ChildContent>
		    @switch (localSymbol.SymbolKindString)
		    {
		        case "TypeSymbol":
		        {
		        	var node = GetDefinitionNode();
		        	
		        	if (node is TypeClauseNode typeClauseNode)
		        	{
		        		@SymbolStaticRenderFragments.GetTypeClauseNodeSymbolRenderFragment(typeClauseNode)
		        	}
		        	else if (node is TypeDefinitionNode typeDefinitionNode)
		        	{
		        		@SymbolStaticRenderFragments.GetTypeDefinitionNodeSymbolRenderFragment(typeDefinitionNode)
		        	}
		        	else
		        	{
		        		<text>
		        			@(node?.GetType().Name ?? "null") is not @nameof(TypeClauseNode)
		        		</text>
		        	}
		            
		            break;
		        }
		        case "ConstructorSymbol":
		        {
		            @SymbolStaticRenderFragments.GetConstructorDefinitionNodeSymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "FunctionSymbol":
		        {
		            @SymbolStaticRenderFragments.GetFunctionSymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "LambdaSymbol":
		        {
		            @SymbolStaticRenderFragments.GetLambdaSymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "VariableSymbol":
		        {
		        	@SymbolStaticRenderFragments.GetVariableSymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "FieldSymbol":
		        {
		            @SymbolStaticRenderFragments.GetFieldSymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "PropertySymbol":
		        {
		            @SymbolStaticRenderFragments.GetPropertySymbolRenderFragment(((ISymbol)localSymbol, GetDefinitionNode()))
		            break;
		        }
		        case "StringInterpolationSymbol":
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    string-interpolation
		                </span>
		
		                <span class="luth_te_string-literal">
		                    @localSymbol.TextSpan.GetText()
		                </span>
		            </text>
		            break;
		        }
		        case "StringVerbatimSymbol":
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    string-verbatim
		                </span>
		
		                <span class="luth_te_string-literal">
		                    @localSymbol.TextSpan.GetText()
		                </span>
		            </text>
		            break;
		        }
		        case "NamespaceSymbol":
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    namespace
		                </span>
		
		                <span class="@(string.Empty /* Namespaces do not have their own css class as of (2023-07-20) */)">
		                    @localSymbol.TextSpan.GetText()
		                </span>
		            </text>
		            break;
		        }
		        case "InjectedLanguageComponentSymbol":
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    component
		                </span>
		
		                <span class="luth_te_injected-language-component">
		                    @localSymbol.TextSpan.GetText()
		                </span>
		            </text>
		            break;
		        }
		        case "SourceFileSymbol":
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    Open in editor:
		                </span>
		
		                <button class="luth_button luth_te_source-file"
		                        @onclick="() => OpenInEditorOnClick(localSymbol.TextSpan.GetText())">
		                    @localSymbol.TextSpan.GetText()
		                </button>
		            </text>
		            break;
		        }
		        case "OnClickSymbol":
		        {
		        	var onClickSymbol = (OnClickSymbol)localSymbol;
		        
		            <text>
		                <button class="luth_button luth_te_source-file"
		                        @onclick="onClickSymbol.OnClickFunc">
		                    @onClickSymbol.DisplayText
		                </button>
		            </text>
		            break;
		        }
		        default:
		        {
		            <text>
		                <span class="luth_te_keyword">
		                    unknown-symbol-kind
		                </span>
		
		                <span class="@(string.Empty /* Unknown-symbol-kinds do not have their own css class as of (2023-07-20) */)">
		                    @localSymbol.TextSpan.GetText()
		                </span>
		            </text>
		            break;
		        }
		    }
		</ChildContent>
		<ErrorContent Context="error">
			@error.ToString()
		</ErrorContent>
	</ErrorBoundary>
</div>