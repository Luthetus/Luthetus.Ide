namespace Luthetus.Extensions.CompilerServices.Syntax;

/// <summary>
/// In order to share identical logic with C and CSharp code analysis I need to have them share the SyntaxKind enum. I don't like this because some enum members are used in one language but not the other.
/// </summary>
public enum SyntaxKind
{
	// Tokens Normal
	CommentMultiLineToken,
	CommentSingleLineToken,
	IdentifierToken,
	// The NameableToken isn't real. It is a parameter given to certain methods in order to indicate that you'll
	// accept as a returned SyntaxKind either IdentifierToken or KeywordContextualToken.
	NameableToken,
	NumericLiteralToken,
	CharLiteralToken,
	StringLiteralToken,
	StringInterpolatedStartToken,
	StringInterpolatedContinueToken,
	StringInterpolatedEndToken,
	TriviaToken,
	PreprocessorDirectiveToken,
	LibraryReferenceToken,
	PlusToken,
	PlusPlusToken,
	MinusToken,
	MinusMinusToken,
	StarToken,
	DivisionToken,
	EqualsToken,
	EqualsEqualsToken,
	EqualsCloseAngleBracketToken,
	QuestionMarkToken,
	QuestionMarkQuestionMarkToken,
	PipeToken,
	PipePipeToken,
	AmpersandToken,
	AmpersandAmpersandToken,
	CloseAngleBracketEqualsToken,
	OpenAngleBracketEqualsToken,
	BangToken,
	BangEqualsToken,
	StatementDelimiterToken,
	ArraySyntaxToken,
	AssociatedNameToken,
	AssociatedValueToken,
	OpenAssociatedGroupToken,
	CloseAssociatedGroupToken,
	OpenParenthesisToken,
	CloseParenthesisToken,
	OpenBraceToken,
	CloseBraceToken,
	OpenAngleBracketToken,
	CloseAngleBracketToken,
	OpenSquareBracketToken,
	CloseSquareBracketToken,
	DollarSignToken,
	AtToken,
	ColonToken,
	MemberAccessToken,
	CommaToken,
	BadToken,
	EndOfFileToken,

	// Token Keywords
	AbstractTokenKeyword,
	AsTokenKeyword,
	BaseTokenKeyword,
	BoolTokenKeyword,
	BreakTokenKeyword,
	ByteTokenKeyword,
	CaseTokenKeyword,
	CatchTokenKeyword,
	CharTokenKeyword,
	CheckedTokenKeyword,
	ClassTokenKeyword,
	ConstTokenKeyword,
	ContinueTokenKeyword,
	DecimalTokenKeyword,
	DefaultTokenKeyword,
	DelegateTokenKeyword,
	DoTokenKeyword,
	DoubleTokenKeyword,
	ElseTokenKeyword,
	EnumTokenKeyword,
	EventTokenKeyword,
	ExplicitTokenKeyword,
	ExternTokenKeyword,
	FalseTokenKeyword,
	FinallyTokenKeyword,
	FixedTokenKeyword,
	FloatTokenKeyword,
	ForTokenKeyword,
	ForeachTokenKeyword,
	GotoTokenKeyword,
	IfTokenKeyword,
	ImplicitTokenKeyword,
	InTokenKeyword,
	IntTokenKeyword,
	InterfaceTokenKeyword,
	InternalTokenKeyword,
	IsTokenKeyword,
	LockTokenKeyword,
	LongTokenKeyword,
	NamespaceTokenKeyword,
	NewTokenKeyword,
	NullTokenKeyword,
	ObjectTokenKeyword,
	OperatorTokenKeyword,
	OutTokenKeyword,
	OverrideTokenKeyword,
	ParamsTokenKeyword,
	PrivateTokenKeyword,
	ProtectedTokenKeyword,
	PublicTokenKeyword,
	ReadonlyTokenKeyword,
	RefTokenKeyword,
	ReturnTokenKeyword,
	SbyteTokenKeyword,
	SealedTokenKeyword,
	ShortTokenKeyword,
	SizeofTokenKeyword,
	StackallocTokenKeyword,
	StaticTokenKeyword,
	StringTokenKeyword,
	StructTokenKeyword,
	SwitchTokenKeyword,
	ThisTokenKeyword,
	ThrowTokenKeyword,
	TrueTokenKeyword,
	TryTokenKeyword,
	TryStatementTryNode,
	TryStatementCatchNode,
	TryStatementFinallyNode,
	TypeofTokenKeyword,
	UintTokenKeyword,
	UlongTokenKeyword,
	UncheckedTokenKeyword,
	UnsafeTokenKeyword,
	UshortTokenKeyword,
	UsingTokenKeyword,
	VirtualTokenKeyword,
	VoidTokenKeyword,
	VolatileTokenKeyword,
	WhileTokenKeyword,
	UnrecognizedTokenKeyword,

	// Token Contextual-Keywords
	AddTokenContextualKeyword,
	AndTokenContextualKeyword,
	AliasTokenContextualKeyword,
	AscendingTokenContextualKeyword,
	ArgsTokenContextualKeyword,
	AsyncTokenContextualKeyword,
	AwaitTokenContextualKeyword,
	ByTokenContextualKeyword,
	DescendingTokenContextualKeyword,
	DynamicTokenContextualKeyword,
	EqualsTokenContextualKeyword,
	FileTokenContextualKeyword,
	FromTokenContextualKeyword,
	GetTokenContextualKeyword,
	GlobalTokenContextualKeyword,
	GroupTokenContextualKeyword,
	InitTokenContextualKeyword,
	IntoTokenContextualKeyword,
	JoinTokenContextualKeyword,
	LetTokenContextualKeyword,
	ManagedTokenContextualKeyword,
	NameofTokenContextualKeyword,
	NintTokenContextualKeyword,
	NotTokenContextualKeyword,
	NotnullTokenContextualKeyword,
	NuintTokenContextualKeyword,
	OnTokenContextualKeyword,
	OrTokenContextualKeyword,
	OrderbyTokenContextualKeyword,
	PartialTokenContextualKeyword,
	RecordTokenContextualKeyword,
	RemoveTokenContextualKeyword,
	RequiredTokenContextualKeyword,
	ScopedTokenContextualKeyword,
	SelectTokenContextualKeyword,
	SetTokenContextualKeyword,
	UnmanagedTokenContextualKeyword,
	ValueTokenContextualKeyword,
	VarTokenContextualKeyword,
	WhenTokenContextualKeyword,
	WhereTokenContextualKeyword,
	WithTokenContextualKeyword,
	YieldTokenContextualKeyword,
	UnrecognizedTokenContextualKeyword,

	// Stitching
	CompilationUnit,
	CodeBlockNode,

	// Nodes
	LiteralExpressionNode,
	InterpolatedStringNode,
	AmbiguousParenthesizedExpressionNode,
	ParenthesizedExpressionNode,
	EmptyExpressionNode,
	AmbiguousIdentifierExpressionNode,
	PreprocessorLibraryReferenceStatementNode,
	TypeDefinitionNode,
	TypeClauseNode,
	ExplicitCastNode,
	VariableDeclarationNode,
	VariableReferenceNode,
	VariableAssignmentExpressionNode,
	VariableExpressionNode,
	WithExpressionNode,
	PropertyDefinitionNode,
	FieldDefinitionNode,
	ConstructorDefinitionNode,
	ConstructorInvocationExpressionNode,
	ObjectInitializationParametersListingNode,
	ObjectInitializationParameterEntryNode,
	FunctionDefinitionNode,
	FunctionArgumentsListingNode,
	FunctionInvocationNode,
	LambdaExpressionNode,
	TupleExpressionNode,
	GenericArgumentsListingNode,
	GenericArgumentEntryNode,
	GenericParametersListingNode,
	GenericParameterEntryNode,
	GlobalCodeBlockNode,
	ArbitraryCodeBlockNode,
	InheritanceStatementNode,
	IfStatementNode,
	ForeachStatementNode,
	DoWhileStatementNode,
	WhileStatementNode,
	ForStatementNode,
	SwitchStatementNode,
	SwitchExpressionNode,
	TryStatementNode,
	LockStatementNode,
	ReturnStatementNode,
	NamespaceStatementNode,
	NamespaceGroupNode,
	ObjectInitializationNode,
	UsingStatementListingNode,
	BadExpressionNode,
	UnaryOperatorNode,
	UnaryExpressionNode,
	BinaryExpressionNode,

	// Symbols
	TypeSymbol,
	ConstructorSymbol,
	DiscardSymbol,
	FunctionSymbol,
	LambdaSymbol,
	VariableSymbol,
	FieldSymbol,
	PropertySymbol,
	EnumMemberSymbol,
	StringInterpolationSymbol,
	StringVerbatimSymbol,
	NamespaceSymbol,
	InjectedLanguageComponentSymbol,
	SourceFileSymbol,
	OnClickSymbol,
}