@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals
@using Luthetus.Extensions.CompilerServices.Syntax
@using Luthetus.Extensions.CompilerServices.Syntax.Nodes

@{
	var syntaxViewModelLocal = SyntaxViewModel;
	
	string? prefixText;
	string? text;
	
	if (syntaxViewModelLocal.DefinitionNode is null && syntaxViewModelLocal.TargetNode is null && syntaxViewModelLocal.TargetSymbol is null)
	{
		prefixText = "(null)";
		text = null;
	}
	else if (syntaxViewModelLocal.DefinitionNode is not null && syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.VariableDeclarationNode)
	{
		prefixText = "(definition)";
		text = "unknown state";
	}
	else if (syntaxViewModelLocal.TargetNode is not null && syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.VariableReferenceNode)
	{
		prefixText = "(reference)";
		text = "unknown state";
	}
	else if (syntaxViewModelLocal.TargetSymbol is not null &&
			 (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.StringInterpolationSymbol ||
			  	syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.StringVerbatimSymbol))
	{
		if (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.StringInterpolationSymbol)
		{
			prefixText = "(string-interpolation)";
		}
		else if (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.StringVerbatimSymbol)
		{
        	prefixText = "(string-verbatim)";
		}
		else if (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.InjectedLanguageComponentSymbol)
		{
        	prefixText = "(component)";
		}
		else
		{
			prefixText = "(symbol)";
		}
		
		text = syntaxViewModelLocal.TargetSymbol.Value.TextSpan.GetText();
	}
	else
	{
		prefixText = "(unrecognizable-state)";
		text = null;
	}
}

<span>
    <span class="luth_te_keyword">
        @prefixText
    </span>

	@if (text is not null)
	{
		<span class="luth_te_string-literal">
	        @text
	    </span>
	}
</span>